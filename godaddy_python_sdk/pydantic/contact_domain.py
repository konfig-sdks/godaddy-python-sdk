# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from godaddy_python_sdk.pydantic.address import Address

class ContactDomain(BaseModel):
    address_mailing: Address = Field(alias='addressMailing')

    email: str = Field(alias='email')

    # Whether or not the contact details should be shown in the WHOIS
    expose_whois: bool = Field(alias='exposeWhois')

    name_first: str = Field(alias='nameFirst')

    name_last: str = Field(alias='nameLast')

    phone: str = Field(alias='phone')

    # Timestamp indicating when the contact was created
    _created_at: typing.Optional[str] = Field(None, alias='_createdAt')

    # Flag indicating if the contact has been logically deleted in the system
    _deleted: typing.Optional[bool] = Field(None, alias='_deleted')

    # Timestamp indicating when the contact was last modified
    _modified_at: typing.Optional[str] = Field(None, alias='_modifiedAt')

    # The current revision number of the contact.
    _revision: typing.Optional[int] = Field(None, alias='_revision')

    # Unique identifier for this Contact
    contact_id: typing.Optional[str] = Field(None, alias='contactId')

    # The encoding of the contact data<br/><ul><li><strong style='margin-left: 12px;'>ASCII</strong> - Data contains only ASCII characters that are not region or language specific</li><li><strong style='margin-left: 12px;'>UTF-8</strong> - Data contains characters that are specific to a region or language</li></ul>
    encoding: typing.Optional[Literal["ASCII", "UTF-8"]] = Field(None, alias='encoding')

    fax: typing.Optional[str] = Field(None, alias='fax')

    job_title: typing.Optional[str] = Field(None, alias='jobTitle')

    # The contact eligibility data fields as specified by GET /v2/customers/{customerId}/domains/contacts/schema/{tld}
    metadata: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='metadata')

    name_middle: typing.Optional[str] = Field(None, alias='nameMiddle')

    organization: typing.Optional[str] = Field(None, alias='organization')

    # The tlds that this contact can be assigned to
    tlds: typing.Optional[typing.List[str]] = Field(None, alias='tlds')
    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
