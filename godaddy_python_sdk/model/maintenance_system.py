# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class MaintenanceSystem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "impact",
            "name",
        }
        
        class properties:
            
            
            class impact(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "DELAYED": "DELAYED",
                                "DOWN": "DOWN",
                                "NON_AUTHORITATIVE": "NON_AUTHORITATIVE",
                                "PARTIAL": "PARTIAL",
                            }
                        
                        @schemas.classproperty
                        def DELAYED(cls):
                            return cls("DELAYED")
                        
                        @schemas.classproperty
                        def DOWN(cls):
                            return cls("DOWN")
                        
                        @schemas.classproperty
                        def NON_AUTHORITATIVE(cls):
                            return cls("NON_AUTHORITATIVE")
                        
                        @schemas.classproperty
                        def PARTIAL(cls):
                            return cls("PARTIAL")
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'impact':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DOMAIN_CHECKS": "DOMAIN_CHECKS",
                        "DOMAIN_MANAGEMENT": "DOMAIN_MANAGEMENT",
                        "DOMAIN_REGISTRATION": "DOMAIN_REGISTRATION",
                        "DOMAIN_REGISTRATION_DATA": "DOMAIN_REGISTRATION_DATA",
                        "DOMAIN_RESOLUTION": "DOMAIN_RESOLUTION",
                        "RESELLER_ADMIN_PORTAL": "RESELLER_ADMIN_PORTAL",
                        "RESELLER_STOREFRONT": "RESELLER_STOREFRONT",
                    }
                
                @schemas.classproperty
                def DOMAIN_CHECKS(cls):
                    return cls("DOMAIN_CHECKS")
                
                @schemas.classproperty
                def DOMAIN_MANAGEMENT(cls):
                    return cls("DOMAIN_MANAGEMENT")
                
                @schemas.classproperty
                def DOMAIN_REGISTRATION(cls):
                    return cls("DOMAIN_REGISTRATION")
                
                @schemas.classproperty
                def DOMAIN_REGISTRATION_DATA(cls):
                    return cls("DOMAIN_REGISTRATION_DATA")
                
                @schemas.classproperty
                def DOMAIN_RESOLUTION(cls):
                    return cls("DOMAIN_RESOLUTION")
                
                @schemas.classproperty
                def RESELLER_ADMIN_PORTAL(cls):
                    return cls("RESELLER_ADMIN_PORTAL")
                
                @schemas.classproperty
                def RESELLER_STOREFRONT(cls):
                    return cls("RESELLER_STOREFRONT")
            __annotations__ = {
                "impact": impact,
                "name": name,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    impact: MetaOapg.properties.impact
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impact"]) -> MetaOapg.properties.impact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["impact"], typing_extensions.Literal["name"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impact"]) -> MetaOapg.properties.impact: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["impact"], typing_extensions.Literal["name"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        impact: typing.Union[MetaOapg.properties.impact, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'MaintenanceSystem':
        return super().__new__(
            cls,
            *args,
            impact=impact,
            name=name,
            _configuration=_configuration,
        )
