# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainsContactsBulk(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "domains",
        }
        
        class properties:
            
            
            class domains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domains':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def contactAdmin() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactBilling() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactPresence() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactRegistrant() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactTech() -> typing.Type['Contact']:
                return Contact
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ABORIGINAL(cls):
                    return cls("ABORIGINAL")
                
                @schemas.classproperty
                def ASSOCIATION(cls):
                    return cls("ASSOCIATION")
                
                @schemas.classproperty
                def CITIZEN(cls):
                    return cls("CITIZEN")
                
                @schemas.classproperty
                def CORPORATION(cls):
                    return cls("CORPORATION")
                
                @schemas.classproperty
                def EDUCATIONAL(cls):
                    return cls("EDUCATIONAL")
                
                @schemas.classproperty
                def GOVERNMENT(cls):
                    return cls("GOVERNMENT")
                
                @schemas.classproperty
                def HOSPITAL(cls):
                    return cls("HOSPITAL")
                
                @schemas.classproperty
                def INDIAN_BAND(cls):
                    return cls("INDIAN_BAND")
                
                @schemas.classproperty
                def LEGAL_REPRESENTATIVE(cls):
                    return cls("LEGAL_REPRESENTATIVE")
                
                @schemas.classproperty
                def LIBRARY_ARCHIVE_MUSEUM(cls):
                    return cls("LIBRARY_ARCHIVE_MUSEUM")
                
                @schemas.classproperty
                def MARK_REGISTERED(cls):
                    return cls("MARK_REGISTERED")
                
                @schemas.classproperty
                def MARK_TRADE(cls):
                    return cls("MARK_TRADE")
                
                @schemas.classproperty
                def PARTNERSHIP(cls):
                    return cls("PARTNERSHIP")
                
                @schemas.classproperty
                def POLITICAL_PARTY(cls):
                    return cls("POLITICAL_PARTY")
                
                @schemas.classproperty
                def RESIDENT_PERMANENT(cls):
                    return cls("RESIDENT_PERMANENT")
                
                @schemas.classproperty
                def TRUST(cls):
                    return cls("TRUST")
                
                @schemas.classproperty
                def UNION(cls):
                    return cls("UNION")
            __annotations__ = {
                "domains": domains,
                "contactAdmin": contactAdmin,
                "contactBilling": contactBilling,
                "contactPresence": contactPresence,
                "contactRegistrant": contactRegistrant,
                "contactTech": contactTech,
                "entityType": entityType,
            }

    
    domains: MetaOapg.properties.domains
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactAdmin"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactBilling"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactPresence"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactRegistrant"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactTech"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domains", "contactAdmin", "contactBilling", "contactPresence", "contactRegistrant", "contactTech", "entityType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactAdmin"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactBilling"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactPresence"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactRegistrant"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactTech"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> typing.Union[MetaOapg.properties.entityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domains", "contactAdmin", "contactBilling", "contactPresence", "contactRegistrant", "contactTech", "entityType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        domains: typing.Union[MetaOapg.properties.domains, list, tuple, ],
        contactAdmin: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactBilling: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactPresence: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactRegistrant: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactTech: typing.Union['Contact', schemas.Unset] = schemas.unset,
        entityType: typing.Union[MetaOapg.properties.entityType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainsContactsBulk':
        return super().__new__(
            cls,
            *args,
            domains=domains,
            contactAdmin=contactAdmin,
            contactBilling=contactBilling,
            contactPresence=contactPresence,
            contactRegistrant=contactRegistrant,
            contactTech=contactTech,
            entityType=entityType,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.contact import Contact
