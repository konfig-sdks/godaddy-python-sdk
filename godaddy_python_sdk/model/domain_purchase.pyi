# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainPurchase(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "domain",
            "consent",
        }
        
        class properties:
        
            @staticmethod
            def consent() -> typing.Type['Consent']:
                return Consent
            domain = schemas.StrSchema
        
            @staticmethod
            def contactAdmin() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactBilling() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactRegistrant() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactTech() -> typing.Type['Contact']:
                return Contact
            
            
            class nameServers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameServers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class period(
                schemas.IntSchema
            ):
                pass
            privacy = schemas.BoolSchema
            renewAuto = schemas.BoolSchema
            __annotations__ = {
                "consent": consent,
                "domain": domain,
                "contactAdmin": contactAdmin,
                "contactBilling": contactBilling,
                "contactRegistrant": contactRegistrant,
                "contactTech": contactTech,
                "nameServers": nameServers,
                "period": period,
                "privacy": privacy,
                "renewAuto": renewAuto,
            }

    
    domain: MetaOapg.properties.domain
    consent: 'Consent'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consent"]) -> 'Consent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactAdmin"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactBilling"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactRegistrant"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactTech"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consent", "domain", "contactAdmin", "contactBilling", "contactRegistrant", "contactTech", "nameServers", "period", "privacy", "renewAuto", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consent"]) -> 'Consent': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactAdmin"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactBilling"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactRegistrant"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactTech"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameServers"]) -> typing.Union[MetaOapg.properties.nameServers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> typing.Union[MetaOapg.properties.privacy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewAuto"]) -> typing.Union[MetaOapg.properties.renewAuto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consent", "domain", "contactAdmin", "contactBilling", "contactRegistrant", "contactTech", "nameServers", "period", "privacy", "renewAuto", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        domain: typing.Union[MetaOapg.properties.domain, str, ],
        consent: 'Consent',
        contactAdmin: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactBilling: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactRegistrant: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactTech: typing.Union['Contact', schemas.Unset] = schemas.unset,
        nameServers: typing.Union[MetaOapg.properties.nameServers, list, tuple, schemas.Unset] = schemas.unset,
        period: typing.Union[MetaOapg.properties.period, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        privacy: typing.Union[MetaOapg.properties.privacy, bool, schemas.Unset] = schemas.unset,
        renewAuto: typing.Union[MetaOapg.properties.renewAuto, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainPurchase':
        return super().__new__(
            cls,
            *args,
            domain=domain,
            consent=consent,
            contactAdmin=contactAdmin,
            contactBilling=contactBilling,
            contactRegistrant=contactRegistrant,
            contactTech=contactTech,
            nameServers=nameServers,
            period=period,
            privacy=privacy,
            renewAuto=renewAuto,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.consent import Consent
from godaddy_python_sdk.model.contact import Contact
