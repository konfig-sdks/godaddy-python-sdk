# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainContacts(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "contactRegistrant",
        }
        
        class properties:
        
            @staticmethod
            def contactRegistrant() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactAdmin() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactBilling() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactTech() -> typing.Type['Contact']:
                return Contact
            __annotations__ = {
                "contactRegistrant": contactRegistrant,
                "contactAdmin": contactAdmin,
                "contactBilling": contactBilling,
                "contactTech": contactTech,
            }

    
    contactRegistrant: 'Contact'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactRegistrant"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactAdmin"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactBilling"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactTech"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contactRegistrant", "contactAdmin", "contactBilling", "contactTech", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactRegistrant"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactAdmin"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactBilling"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactTech"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contactRegistrant", "contactAdmin", "contactBilling", "contactTech", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        contactRegistrant: 'Contact',
        contactAdmin: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactBilling: typing.Union['Contact', schemas.Unset] = schemas.unset,
        contactTech: typing.Union['Contact', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainContacts':
        return super().__new__(
            cls,
            *args,
            contactRegistrant=contactRegistrant,
            contactAdmin=contactAdmin,
            contactBilling=contactBilling,
            contactTech=contactTech,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.contact import Contact
