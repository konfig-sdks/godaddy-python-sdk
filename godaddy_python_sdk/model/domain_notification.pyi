# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainNotification(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "addedAt",
            "resource",
            "notificationId",
            "type",
            "resourceType",
            "status",
        }
        
        class properties:
            addedAt = schemas.StrSchema
            notificationId = schemas.StrSchema
            resource = schemas.StrSchema
            
            
            class resourceType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CONTACT(cls):
                    return cls("CONTACT")
                
                @schemas.classproperty
                def DOMAIN(cls):
                    return cls("DOMAIN")
                
                @schemas.classproperty
                def HOST(cls):
                    return cls("HOST")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AWAITING(cls):
                    return cls("AWAITING")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUTH_CODE_PURCHASE(cls):
                    return cls("AUTH_CODE_PURCHASE")
                
                @schemas.classproperty
                def AUTH_CODE_REGENERATE(cls):
                    return cls("AUTH_CODE_REGENERATE")
                
                @schemas.classproperty
                def AUTO_RENEWAL(cls):
                    return cls("AUTO_RENEWAL")
                
                @schemas.classproperty
                def BACKORDER(cls):
                    return cls("BACKORDER")
                
                @schemas.classproperty
                def BACKORDER_PURCHASE(cls):
                    return cls("BACKORDER_PURCHASE")
                
                @schemas.classproperty
                def BACKORDER_DELETE(cls):
                    return cls("BACKORDER_DELETE")
                
                @schemas.classproperty
                def BACKORDER_UPDATE(cls):
                    return cls("BACKORDER_UPDATE")
                
                @schemas.classproperty
                def CONTACT_CREATE(cls):
                    return cls("CONTACT_CREATE")
                
                @schemas.classproperty
                def CONTACT_DELETE(cls):
                    return cls("CONTACT_DELETE")
                
                @schemas.classproperty
                def CONTACT_UPDATE(cls):
                    return cls("CONTACT_UPDATE")
                
                @schemas.classproperty
                def DNS_VERIFICATION(cls):
                    return cls("DNS_VERIFICATION")
                
                @schemas.classproperty
                def DNSSEC_CREATE(cls):
                    return cls("DNSSEC_CREATE")
                
                @schemas.classproperty
                def DNSSEC_DELETE(cls):
                    return cls("DNSSEC_DELETE")
                
                @schemas.classproperty
                def DOMAIN_DELETE(cls):
                    return cls("DOMAIN_DELETE")
                
                @schemas.classproperty
                def DOMAIN_UPDATE(cls):
                    return cls("DOMAIN_UPDATE")
                
                @schemas.classproperty
                def DOMAIN_UPDATE_CONTACTS(cls):
                    return cls("DOMAIN_UPDATE_CONTACTS")
                
                @schemas.classproperty
                def DOMAIN_UPDATE_NAME_SERVERS(cls):
                    return cls("DOMAIN_UPDATE_NAME_SERVERS")
                
                @schemas.classproperty
                def EXPIRY(cls):
                    return cls("EXPIRY")
                
                @schemas.classproperty
                def HOST_CREATE(cls):
                    return cls("HOST_CREATE")
                
                @schemas.classproperty
                def HOST_DELETE(cls):
                    return cls("HOST_DELETE")
                
                @schemas.classproperty
                def ICANN_VERIFICATION(cls):
                    return cls("ICANN_VERIFICATION")
                
                @schemas.classproperty
                def MIGRATE(cls):
                    return cls("MIGRATE")
                
                @schemas.classproperty
                def MIGRATE_IN(cls):
                    return cls("MIGRATE_IN")
                
                @schemas.classproperty
                def PREMIUM(cls):
                    return cls("PREMIUM")
                
                @schemas.classproperty
                def PRIVACY_PURCHASE(cls):
                    return cls("PRIVACY_PURCHASE")
                
                @schemas.classproperty
                def PRIVACY_DELETE(cls):
                    return cls("PRIVACY_DELETE")
                
                @schemas.classproperty
                def REDEEM(cls):
                    return cls("REDEEM")
                
                @schemas.classproperty
                def REGISTER(cls):
                    return cls("REGISTER")
                
                @schemas.classproperty
                def RENEW(cls):
                    return cls("RENEW")
                
                @schemas.classproperty
                def RENEW_UNDO(cls):
                    return cls("RENEW_UNDO")
                
                @schemas.classproperty
                def TRADE(cls):
                    return cls("TRADE")
                
                @schemas.classproperty
                def TRADE_CANCEL(cls):
                    return cls("TRADE_CANCEL")
                
                @schemas.classproperty
                def TRADE_PURCHASE(cls):
                    return cls("TRADE_PURCHASE")
                
                @schemas.classproperty
                def TRADE_PURCHASE_AUTH_TEXT_MESSAGE(cls):
                    return cls("TRADE_PURCHASE_AUTH_TEXT_MESSAGE")
                
                @schemas.classproperty
                def TRADE_RESEND_AUTH_EMAIL(cls):
                    return cls("TRADE_RESEND_AUTH_EMAIL")
                
                @schemas.classproperty
                def TRANSFER(cls):
                    return cls("TRANSFER")
                
                @schemas.classproperty
                def TRANSFER_IN(cls):
                    return cls("TRANSFER_IN")
                
                @schemas.classproperty
                def TRANSFER_IN_ACCEPT(cls):
                    return cls("TRANSFER_IN_ACCEPT")
                
                @schemas.classproperty
                def TRANSFER_IN_CANCEL(cls):
                    return cls("TRANSFER_IN_CANCEL")
                
                @schemas.classproperty
                def TRANSFER_IN_RESTART(cls):
                    return cls("TRANSFER_IN_RESTART")
                
                @schemas.classproperty
                def TRANSFER_IN_RETRY(cls):
                    return cls("TRANSFER_IN_RETRY")
                
                @schemas.classproperty
                def TRANSFER_OUT(cls):
                    return cls("TRANSFER_OUT")
                
                @schemas.classproperty
                def TRANSFER_OUT_ACCEPT(cls):
                    return cls("TRANSFER_OUT_ACCEPT")
                
                @schemas.classproperty
                def TRANSFER_OUT_REJECT(cls):
                    return cls("TRANSFER_OUT_REJECT")
                
                @schemas.classproperty
                def TRANSFER_OUT_REQUESTED(cls):
                    return cls("TRANSFER_OUT_REQUESTED")
                
                @schemas.classproperty
                def TRANSIT(cls):
                    return cls("TRANSIT")
            metadata = schemas.DictSchema
            requestId = schemas.StrSchema
            __annotations__ = {
                "addedAt": addedAt,
                "notificationId": notificationId,
                "resource": resource,
                "resourceType": resourceType,
                "status": status,
                "type": type,
                "metadata": metadata,
                "requestId": requestId,
            }

    
    addedAt: MetaOapg.properties.addedAt
    resource: MetaOapg.properties.resource
    notificationId: MetaOapg.properties.notificationId
    type: MetaOapg.properties.type
    resourceType: MetaOapg.properties.resourceType
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addedAt"]) -> MetaOapg.properties.addedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource"]) -> MetaOapg.properties.resource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addedAt", "notificationId", "resource", "resourceType", "status", "type", "metadata", "requestId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addedAt"]) -> MetaOapg.properties.addedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource"]) -> MetaOapg.properties.resource: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> typing.Union[MetaOapg.properties.requestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addedAt", "notificationId", "resource", "resourceType", "status", "type", "metadata", "requestId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        addedAt: typing.Union[MetaOapg.properties.addedAt, str, ],
        resource: typing.Union[MetaOapg.properties.resource, str, ],
        notificationId: typing.Union[MetaOapg.properties.notificationId, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        resourceType: typing.Union[MetaOapg.properties.resourceType, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        requestId: typing.Union[MetaOapg.properties.requestId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainNotification':
        return super().__new__(
            cls,
            *args,
            addedAt=addedAt,
            resource=resource,
            notificationId=notificationId,
            type=type,
            resourceType=resourceType,
            status=status,
            metadata=metadata,
            requestId=requestId,
            _configuration=_configuration,
            **kwargs,
        )
