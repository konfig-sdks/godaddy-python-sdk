# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class Contact(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "nameLast",
            "nameFirst",
            "addressMailing",
            "phone",
            "email",
        }
        
        class properties:
        
            @staticmethod
            def addressMailing() -> typing.Type['Address']:
                return Address
            email = schemas.StrSchema
            nameFirst = schemas.StrSchema
            nameLast = schemas.StrSchema
            phone = schemas.StrSchema
            fax = schemas.StrSchema
            jobTitle = schemas.StrSchema
            nameMiddle = schemas.StrSchema
            organization = schemas.StrSchema
            __annotations__ = {
                "addressMailing": addressMailing,
                "email": email,
                "nameFirst": nameFirst,
                "nameLast": nameLast,
                "phone": phone,
                "fax": fax,
                "jobTitle": jobTitle,
                "nameMiddle": nameMiddle,
                "organization": organization,
            }

    
    nameLast: MetaOapg.properties.nameLast
    nameFirst: MetaOapg.properties.nameFirst
    addressMailing: 'Address'
    phone: MetaOapg.properties.phone
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressMailing"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameFirst"]) -> MetaOapg.properties.nameFirst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameLast"]) -> MetaOapg.properties.nameLast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fax"]) -> MetaOapg.properties.fax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> MetaOapg.properties.jobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameMiddle"]) -> MetaOapg.properties.nameMiddle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addressMailing", "email", "nameFirst", "nameLast", "phone", "fax", "jobTitle", "nameMiddle", "organization", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressMailing"]) -> 'Address': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameFirst"]) -> MetaOapg.properties.nameFirst: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameLast"]) -> MetaOapg.properties.nameLast: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fax"]) -> typing.Union[MetaOapg.properties.fax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union[MetaOapg.properties.jobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameMiddle"]) -> typing.Union[MetaOapg.properties.nameMiddle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union[MetaOapg.properties.organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addressMailing", "email", "nameFirst", "nameLast", "phone", "fax", "jobTitle", "nameMiddle", "organization", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        nameLast: typing.Union[MetaOapg.properties.nameLast, str, ],
        nameFirst: typing.Union[MetaOapg.properties.nameFirst, str, ],
        addressMailing: 'Address',
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        fax: typing.Union[MetaOapg.properties.fax, str, schemas.Unset] = schemas.unset,
        jobTitle: typing.Union[MetaOapg.properties.jobTitle, str, schemas.Unset] = schemas.unset,
        nameMiddle: typing.Union[MetaOapg.properties.nameMiddle, str, schemas.Unset] = schemas.unset,
        organization: typing.Union[MetaOapg.properties.organization, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contact':
        return super().__new__(
            cls,
            *args,
            nameLast=nameLast,
            nameFirst=nameFirst,
            addressMailing=addressMailing,
            phone=phone,
            email=email,
            fax=fax,
            jobTitle=jobTitle,
            nameMiddle=nameMiddle,
            organization=organization,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.address import Address
