# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainUpdate(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def consent() -> typing.Type['ConsentDomainUpdate']:
                return ConsentDomainUpdate
            exposeWhois = schemas.BoolSchema
            locked = schemas.BoolSchema
            
            
            class nameServers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            format = 'host-name'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameServers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            renewAuto = schemas.BoolSchema
            subaccountId = schemas.StrSchema
            __annotations__ = {
                "consent": consent,
                "exposeWhois": exposeWhois,
                "locked": locked,
                "nameServers": nameServers,
                "renewAuto": renewAuto,
                "subaccountId": subaccountId,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consent"]) -> 'ConsentDomainUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exposeWhois"]) -> MetaOapg.properties.exposeWhois: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subaccountId"]) -> MetaOapg.properties.subaccountId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consent", "exposeWhois", "locked", "nameServers", "renewAuto", "subaccountId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consent"]) -> typing.Union['ConsentDomainUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exposeWhois"]) -> typing.Union[MetaOapg.properties.exposeWhois, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameServers"]) -> typing.Union[MetaOapg.properties.nameServers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewAuto"]) -> typing.Union[MetaOapg.properties.renewAuto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subaccountId"]) -> typing.Union[MetaOapg.properties.subaccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consent", "exposeWhois", "locked", "nameServers", "renewAuto", "subaccountId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        consent: typing.Union['ConsentDomainUpdate', schemas.Unset] = schemas.unset,
        exposeWhois: typing.Union[MetaOapg.properties.exposeWhois, bool, schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, bool, schemas.Unset] = schemas.unset,
        nameServers: typing.Union[MetaOapg.properties.nameServers, list, tuple, schemas.Unset] = schemas.unset,
        renewAuto: typing.Union[MetaOapg.properties.renewAuto, bool, schemas.Unset] = schemas.unset,
        subaccountId: typing.Union[MetaOapg.properties.subaccountId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainUpdate':
        return super().__new__(
            cls,
            *args,
            consent=consent,
            exposeWhois=exposeWhois,
            locked=locked,
            nameServers=nameServers,
            renewAuto=renewAuto,
            subaccountId=subaccountId,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.consent_domain_update import ConsentDomainUpdate
