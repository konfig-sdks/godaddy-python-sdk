# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainDnssec(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "algorithm",
        }
        
        class properties:
            
            
            class algorithm(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RSAMD5": "RSAMD5",
                        "DH": "DH",
                        "DSA": "DSA",
                        "RSASHA1": "RSASHA1",
                        "DSA_NSEC3_SHA1": "DSA_NSEC3_SHA1",
                        "RSASHA1_NSEC3_SHA1": "RSASHA1_NSEC3_SHA1",
                        "RSASHA256": "RSASHA256",
                        "RSASHA512": "RSASHA512",
                        "ECC_GOST": "ECC_GOST",
                        "ECDSAP256SHA256": "ECDSAP256SHA256",
                        "ECDSAP384SHA384": "ECDSAP384SHA384",
                        "ED25519": "ED25519",
                        "ED448": "ED448",
                        "PRIVATEDNS": "PRIVATEDNS",
                        "PRIVATEOID": "PRIVATEOID",
                    }
                
                @schemas.classproperty
                def RSAMD5(cls):
                    return cls("RSAMD5")
                
                @schemas.classproperty
                def DH(cls):
                    return cls("DH")
                
                @schemas.classproperty
                def DSA(cls):
                    return cls("DSA")
                
                @schemas.classproperty
                def RSASHA1(cls):
                    return cls("RSASHA1")
                
                @schemas.classproperty
                def DSA_NSEC3_SHA1(cls):
                    return cls("DSA_NSEC3_SHA1")
                
                @schemas.classproperty
                def RSASHA1_NSEC3_SHA1(cls):
                    return cls("RSASHA1_NSEC3_SHA1")
                
                @schemas.classproperty
                def RSASHA256(cls):
                    return cls("RSASHA256")
                
                @schemas.classproperty
                def RSASHA512(cls):
                    return cls("RSASHA512")
                
                @schemas.classproperty
                def ECC_GOST(cls):
                    return cls("ECC_GOST")
                
                @schemas.classproperty
                def ECDSAP256SHA256(cls):
                    return cls("ECDSAP256SHA256")
                
                @schemas.classproperty
                def ECDSAP384SHA384(cls):
                    return cls("ECDSAP384SHA384")
                
                @schemas.classproperty
                def ED25519(cls):
                    return cls("ED25519")
                
                @schemas.classproperty
                def ED448(cls):
                    return cls("ED448")
                
                @schemas.classproperty
                def PRIVATEDNS(cls):
                    return cls("PRIVATEDNS")
                
                @schemas.classproperty
                def PRIVATEOID(cls):
                    return cls("PRIVATEOID")
            digest = schemas.StrSchema
            
            
            class digestType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SHA1": "SHA1",
                        "SHA256": "SHA256",
                        "GOST": "GOST",
                        "SHA384": "SHA384",
                    }
                
                @schemas.classproperty
                def SHA1(cls):
                    return cls("SHA1")
                
                @schemas.classproperty
                def SHA256(cls):
                    return cls("SHA256")
                
                @schemas.classproperty
                def GOST(cls):
                    return cls("GOST")
                
                @schemas.classproperty
                def SHA384(cls):
                    return cls("SHA384")
            
            
            class flags(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ZSK": "ZSK",
                        "KSK": "KSK",
                    }
                
                @schemas.classproperty
                def ZSK(cls):
                    return cls("ZSK")
                
                @schemas.classproperty
                def KSK(cls):
                    return cls("KSK")
            
            
            class keyTag(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    format = 'integer-positive'
                    inclusive_maximum = 65536
            maxSignatureLife = schemas.IntSchema
            publicKey = schemas.StrSchema
            __annotations__ = {
                "algorithm": algorithm,
                "digest": digest,
                "digestType": digestType,
                "flags": flags,
                "keyTag": keyTag,
                "maxSignatureLife": maxSignatureLife,
                "publicKey": publicKey,
            }

    
    algorithm: MetaOapg.properties.algorithm
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["algorithm"]) -> MetaOapg.properties.algorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digest"]) -> MetaOapg.properties.digest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digestType"]) -> MetaOapg.properties.digestType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyTag"]) -> MetaOapg.properties.keyTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSignatureLife"]) -> MetaOapg.properties.maxSignatureLife: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicKey"]) -> MetaOapg.properties.publicKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["algorithm", "digest", "digestType", "flags", "keyTag", "maxSignatureLife", "publicKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["algorithm"]) -> MetaOapg.properties.algorithm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digest"]) -> typing.Union[MetaOapg.properties.digest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digestType"]) -> typing.Union[MetaOapg.properties.digestType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyTag"]) -> typing.Union[MetaOapg.properties.keyTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSignatureLife"]) -> typing.Union[MetaOapg.properties.maxSignatureLife, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicKey"]) -> typing.Union[MetaOapg.properties.publicKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["algorithm", "digest", "digestType", "flags", "keyTag", "maxSignatureLife", "publicKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        algorithm: typing.Union[MetaOapg.properties.algorithm, str, ],
        digest: typing.Union[MetaOapg.properties.digest, str, schemas.Unset] = schemas.unset,
        digestType: typing.Union[MetaOapg.properties.digestType, str, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, str, schemas.Unset] = schemas.unset,
        keyTag: typing.Union[MetaOapg.properties.keyTag, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxSignatureLife: typing.Union[MetaOapg.properties.maxSignatureLife, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        publicKey: typing.Union[MetaOapg.properties.publicKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainDnssec':
        return super().__new__(
            cls,
            *args,
            algorithm=algorithm,
            digest=digest,
            digestType=digestType,
            flags=flags,
            keyTag=keyTag,
            maxSignatureLife=maxSignatureLife,
            publicKey=publicKey,
            _configuration=_configuration,
            **kwargs,
        )
