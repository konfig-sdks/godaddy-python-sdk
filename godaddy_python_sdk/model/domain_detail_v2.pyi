# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainDetailV2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "expirationProtected",
            "authCode",
            "holdRegistrar",
            "privacy",
            "nameServers",
            "domainId",
            "createdAt",
            "domain",
            "renewDeadline",
            "locked",
            "contacts",
            "renewAuto",
            "status",
            "transferProtected",
        }
        
        class properties:
            authCode = schemas.StrSchema
        
            @staticmethod
            def contacts() -> typing.Type['DomainContactsV2']:
                return DomainContactsV2
            createdAt = schemas.StrSchema
            domain = schemas.StrSchema
            domainId = schemas.StrSchema
            expirationProtected = schemas.BoolSchema
            holdRegistrar = schemas.BoolSchema
            locked = schemas.BoolSchema
            
            
            class nameServers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameServers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            privacy = schemas.BoolSchema
            renewAuto = schemas.BoolSchema
            renewDeadline = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def DELETED_REDEEMABLE(cls):
                    return cls("DELETED_REDEEMABLE")
                
                @schemas.classproperty
                def EXPIRED(cls):
                    return cls("EXPIRED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def LOCKED_REGISTRAR(cls):
                    return cls("LOCKED_REGISTRAR")
                
                @schemas.classproperty
                def PARKED(cls):
                    return cls("PARKED")
                
                @schemas.classproperty
                def HELD_REGISTRAR(cls):
                    return cls("HELD_REGISTRAR")
                
                @schemas.classproperty
                def OWNERSHIP_CHANGED(cls):
                    return cls("OWNERSHIP_CHANGED")
                
                @schemas.classproperty
                def PENDING_TRANSFER(cls):
                    return cls("PENDING_TRANSFER")
                
                @schemas.classproperty
                def PENDING_REGISTRATION(cls):
                    return cls("PENDING_REGISTRATION")
                
                @schemas.classproperty
                def REPOSSESSED(cls):
                    return cls("REPOSSESSED")
                
                @schemas.classproperty
                def SUSPENDED(cls):
                    return cls("SUSPENDED")
                
                @schemas.classproperty
                def TRANSFERRED(cls):
                    return cls("TRANSFERRED")
            transferProtected = schemas.BoolSchema
            
            
            class actions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Action']:
                        return Action
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Action'], typing.List['Action']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'actions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Action':
                    return super().__getitem__(i)
            deletedAt = schemas.StrSchema
            
            
            class dnssecRecords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DomainDnssec']:
                        return DomainDnssec
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DomainDnssec'], typing.List['DomainDnssec']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dnssecRecords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DomainDnssec':
                    return super().__getitem__(i)
            expiresAt = schemas.StrSchema
            
            
            class hostnames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hostnames':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            modifiedAt = schemas.StrSchema
            registrarCreatedAt = schemas.StrSchema
            
            
            class registryStatusCodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ADD_PERIOD(cls):
                            return cls("ADD_PERIOD")
                        
                        @schemas.classproperty
                        def AUTO_RENEW_PERIOD(cls):
                            return cls("AUTO_RENEW_PERIOD")
                        
                        @schemas.classproperty
                        def CLIENT_DELETE_PROHIBITED(cls):
                            return cls("CLIENT_DELETE_PROHIBITED")
                        
                        @schemas.classproperty
                        def CLIENT_HOLD(cls):
                            return cls("CLIENT_HOLD")
                        
                        @schemas.classproperty
                        def CLIENT_RENEW_PROHIBITED(cls):
                            return cls("CLIENT_RENEW_PROHIBITED")
                        
                        @schemas.classproperty
                        def CLIENT_TRANSFER_PROHIBITED(cls):
                            return cls("CLIENT_TRANSFER_PROHIBITED")
                        
                        @schemas.classproperty
                        def CLIENT_UPDATE_PROHIBITED(cls):
                            return cls("CLIENT_UPDATE_PROHIBITED")
                        
                        @schemas.classproperty
                        def INACTIVE(cls):
                            return cls("INACTIVE")
                        
                        @schemas.classproperty
                        def OK(cls):
                            return cls("OK")
                        
                        @schemas.classproperty
                        def PENDING_CREATE(cls):
                            return cls("PENDING_CREATE")
                        
                        @schemas.classproperty
                        def PENDING_DELETE(cls):
                            return cls("PENDING_DELETE")
                        
                        @schemas.classproperty
                        def PENDING_RENEW(cls):
                            return cls("PENDING_RENEW")
                        
                        @schemas.classproperty
                        def PENDING_RESTORE(cls):
                            return cls("PENDING_RESTORE")
                        
                        @schemas.classproperty
                        def PENDING_TRANSFER(cls):
                            return cls("PENDING_TRANSFER")
                        
                        @schemas.classproperty
                        def PENDING_UPDATE(cls):
                            return cls("PENDING_UPDATE")
                        
                        @schemas.classproperty
                        def REDEMPTION_PERIOD(cls):
                            return cls("REDEMPTION_PERIOD")
                        
                        @schemas.classproperty
                        def RENEW_PERIOD(cls):
                            return cls("RENEW_PERIOD")
                        
                        @schemas.classproperty
                        def SERVER_DELETE_PROHIBITED(cls):
                            return cls("SERVER_DELETE_PROHIBITED")
                        
                        @schemas.classproperty
                        def SERVER_HOLD(cls):
                            return cls("SERVER_HOLD")
                        
                        @schemas.classproperty
                        def SERVER_RENEW_PROHIBITED(cls):
                            return cls("SERVER_RENEW_PROHIBITED")
                        
                        @schemas.classproperty
                        def SERVER_TRANSFER_PROHIBITED(cls):
                            return cls("SERVER_TRANSFER_PROHIBITED")
                        
                        @schemas.classproperty
                        def SERVER_UPDATE_PROHIBITED(cls):
                            return cls("SERVER_UPDATE_PROHIBITED")
                        
                        @schemas.classproperty
                        def TRANSFER_PERIOD(cls):
                            return cls("TRANSFER_PERIOD")
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'registryStatusCodes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def renewal() -> typing.Type['RenewalDetails']:
                return RenewalDetails
            subaccountId = schemas.StrSchema
            transferAwayEligibleAt = schemas.StrSchema
        
            @staticmethod
            def verifications() -> typing.Type['VerificationsDomainV2']:
                return VerificationsDomainV2
            __annotations__ = {
                "authCode": authCode,
                "contacts": contacts,
                "createdAt": createdAt,
                "domain": domain,
                "domainId": domainId,
                "expirationProtected": expirationProtected,
                "holdRegistrar": holdRegistrar,
                "locked": locked,
                "nameServers": nameServers,
                "privacy": privacy,
                "renewAuto": renewAuto,
                "renewDeadline": renewDeadline,
                "status": status,
                "transferProtected": transferProtected,
                "actions": actions,
                "deletedAt": deletedAt,
                "dnssecRecords": dnssecRecords,
                "expiresAt": expiresAt,
                "hostnames": hostnames,
                "modifiedAt": modifiedAt,
                "registrarCreatedAt": registrarCreatedAt,
                "registryStatusCodes": registryStatusCodes,
                "renewal": renewal,
                "subaccountId": subaccountId,
                "transferAwayEligibleAt": transferAwayEligibleAt,
                "verifications": verifications,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    expirationProtected: MetaOapg.properties.expirationProtected
    authCode: MetaOapg.properties.authCode
    holdRegistrar: MetaOapg.properties.holdRegistrar
    privacy: MetaOapg.properties.privacy
    nameServers: MetaOapg.properties.nameServers
    domainId: MetaOapg.properties.domainId
    createdAt: MetaOapg.properties.createdAt
    domain: MetaOapg.properties.domain
    renewDeadline: MetaOapg.properties.renewDeadline
    locked: MetaOapg.properties.locked
    contacts: 'DomainContactsV2'
    renewAuto: MetaOapg.properties.renewAuto
    status: MetaOapg.properties.status
    transferProtected: MetaOapg.properties.transferProtected
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationProtected"]) -> MetaOapg.properties.expirationProtected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdRegistrar"]) -> MetaOapg.properties.holdRegistrar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainId"]) -> MetaOapg.properties.domainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewDeadline"]) -> MetaOapg.properties.renewDeadline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> 'DomainContactsV2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transferProtected"]) -> MetaOapg.properties.transferProtected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions"]) -> MetaOapg.properties.actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletedAt"]) -> MetaOapg.properties.deletedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dnssecRecords"]) -> MetaOapg.properties.dnssecRecords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostnames"]) -> MetaOapg.properties.hostnames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrarCreatedAt"]) -> MetaOapg.properties.registrarCreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registryStatusCodes"]) -> MetaOapg.properties.registryStatusCodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewal"]) -> 'RenewalDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subaccountId"]) -> MetaOapg.properties.subaccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transferAwayEligibleAt"]) -> MetaOapg.properties.transferAwayEligibleAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verifications"]) -> 'VerificationsDomainV2': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expirationProtected"], typing_extensions.Literal["authCode"], typing_extensions.Literal["holdRegistrar"], typing_extensions.Literal["privacy"], typing_extensions.Literal["nameServers"], typing_extensions.Literal["domainId"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["domain"], typing_extensions.Literal["renewDeadline"], typing_extensions.Literal["locked"], typing_extensions.Literal["contacts"], typing_extensions.Literal["renewAuto"], typing_extensions.Literal["status"], typing_extensions.Literal["transferProtected"], typing_extensions.Literal["actions"], typing_extensions.Literal["deletedAt"], typing_extensions.Literal["dnssecRecords"], typing_extensions.Literal["expiresAt"], typing_extensions.Literal["hostnames"], typing_extensions.Literal["modifiedAt"], typing_extensions.Literal["registrarCreatedAt"], typing_extensions.Literal["registryStatusCodes"], typing_extensions.Literal["renewal"], typing_extensions.Literal["subaccountId"], typing_extensions.Literal["transferAwayEligibleAt"], typing_extensions.Literal["verifications"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationProtected"]) -> MetaOapg.properties.expirationProtected: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdRegistrar"]) -> MetaOapg.properties.holdRegistrar: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainId"]) -> MetaOapg.properties.domainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewDeadline"]) -> MetaOapg.properties.renewDeadline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> 'DomainContactsV2': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transferProtected"]) -> MetaOapg.properties.transferProtected: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions"]) -> typing.Union[MetaOapg.properties.actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletedAt"]) -> typing.Union[MetaOapg.properties.deletedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dnssecRecords"]) -> typing.Union[MetaOapg.properties.dnssecRecords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostnames"]) -> typing.Union[MetaOapg.properties.hostnames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> typing.Union[MetaOapg.properties.modifiedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrarCreatedAt"]) -> typing.Union[MetaOapg.properties.registrarCreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registryStatusCodes"]) -> typing.Union[MetaOapg.properties.registryStatusCodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewal"]) -> typing.Union['RenewalDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subaccountId"]) -> typing.Union[MetaOapg.properties.subaccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transferAwayEligibleAt"]) -> typing.Union[MetaOapg.properties.transferAwayEligibleAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verifications"]) -> typing.Union['VerificationsDomainV2', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expirationProtected"], typing_extensions.Literal["authCode"], typing_extensions.Literal["holdRegistrar"], typing_extensions.Literal["privacy"], typing_extensions.Literal["nameServers"], typing_extensions.Literal["domainId"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["domain"], typing_extensions.Literal["renewDeadline"], typing_extensions.Literal["locked"], typing_extensions.Literal["contacts"], typing_extensions.Literal["renewAuto"], typing_extensions.Literal["status"], typing_extensions.Literal["transferProtected"], typing_extensions.Literal["actions"], typing_extensions.Literal["deletedAt"], typing_extensions.Literal["dnssecRecords"], typing_extensions.Literal["expiresAt"], typing_extensions.Literal["hostnames"], typing_extensions.Literal["modifiedAt"], typing_extensions.Literal["registrarCreatedAt"], typing_extensions.Literal["registryStatusCodes"], typing_extensions.Literal["renewal"], typing_extensions.Literal["subaccountId"], typing_extensions.Literal["transferAwayEligibleAt"], typing_extensions.Literal["verifications"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expirationProtected: typing.Union[MetaOapg.properties.expirationProtected, bool, ],
        authCode: typing.Union[MetaOapg.properties.authCode, str, ],
        holdRegistrar: typing.Union[MetaOapg.properties.holdRegistrar, bool, ],
        privacy: typing.Union[MetaOapg.properties.privacy, bool, ],
        nameServers: typing.Union[MetaOapg.properties.nameServers, list, tuple, ],
        domainId: typing.Union[MetaOapg.properties.domainId, str, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, ],
        domain: typing.Union[MetaOapg.properties.domain, str, ],
        renewDeadline: typing.Union[MetaOapg.properties.renewDeadline, str, ],
        locked: typing.Union[MetaOapg.properties.locked, bool, ],
        contacts: 'DomainContactsV2',
        renewAuto: typing.Union[MetaOapg.properties.renewAuto, bool, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        transferProtected: typing.Union[MetaOapg.properties.transferProtected, bool, ],
        actions: typing.Union[MetaOapg.properties.actions, list, tuple, schemas.Unset] = schemas.unset,
        deletedAt: typing.Union[MetaOapg.properties.deletedAt, str, schemas.Unset] = schemas.unset,
        dnssecRecords: typing.Union[MetaOapg.properties.dnssecRecords, list, tuple, schemas.Unset] = schemas.unset,
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, schemas.Unset] = schemas.unset,
        hostnames: typing.Union[MetaOapg.properties.hostnames, list, tuple, schemas.Unset] = schemas.unset,
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, str, schemas.Unset] = schemas.unset,
        registrarCreatedAt: typing.Union[MetaOapg.properties.registrarCreatedAt, str, schemas.Unset] = schemas.unset,
        registryStatusCodes: typing.Union[MetaOapg.properties.registryStatusCodes, list, tuple, schemas.Unset] = schemas.unset,
        renewal: typing.Union['RenewalDetails', schemas.Unset] = schemas.unset,
        subaccountId: typing.Union[MetaOapg.properties.subaccountId, str, schemas.Unset] = schemas.unset,
        transferAwayEligibleAt: typing.Union[MetaOapg.properties.transferAwayEligibleAt, str, schemas.Unset] = schemas.unset,
        verifications: typing.Union['VerificationsDomainV2', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'DomainDetailV2':
        return super().__new__(
            cls,
            *args,
            expirationProtected=expirationProtected,
            authCode=authCode,
            holdRegistrar=holdRegistrar,
            privacy=privacy,
            nameServers=nameServers,
            domainId=domainId,
            createdAt=createdAt,
            domain=domain,
            renewDeadline=renewDeadline,
            locked=locked,
            contacts=contacts,
            renewAuto=renewAuto,
            status=status,
            transferProtected=transferProtected,
            actions=actions,
            deletedAt=deletedAt,
            dnssecRecords=dnssecRecords,
            expiresAt=expiresAt,
            hostnames=hostnames,
            modifiedAt=modifiedAt,
            registrarCreatedAt=registrarCreatedAt,
            registryStatusCodes=registryStatusCodes,
            renewal=renewal,
            subaccountId=subaccountId,
            transferAwayEligibleAt=transferAwayEligibleAt,
            verifications=verifications,
            _configuration=_configuration,
        )

from godaddy_python_sdk.model.action import Action
from godaddy_python_sdk.model.domain_contacts_v2 import DomainContactsV2
from godaddy_python_sdk.model.domain_dnssec import DomainDnssec
from godaddy_python_sdk.model.renewal_details import RenewalDetails
from godaddy_python_sdk.model.verifications_domain_v2 import VerificationsDomainV2
