# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainDetail(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "expirationProtected",
            "authCode",
            "holdRegistrar",
            "privacy",
            "nameServers",
            "domainId",
            "contactBilling",
            "createdAt",
            "contactAdmin",
            "domain",
            "contactRegistrant",
            "contactTech",
            "renewDeadline",
            "locked",
            "renewAuto",
            "status",
            "transferProtected",
        }
        
        class properties:
            authCode = schemas.StrSchema
        
            @staticmethod
            def contactAdmin() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactBilling() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactRegistrant() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def contactTech() -> typing.Type['Contact']:
                return Contact
            createdAt = schemas.DateTimeSchema
            domain = schemas.StrSchema
            domainId = schemas.Float64Schema
            expirationProtected = schemas.BoolSchema
            holdRegistrar = schemas.BoolSchema
            locked = schemas.BoolSchema
            
            
            class nameServers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameServers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            privacy = schemas.BoolSchema
            renewAuto = schemas.BoolSchema
            renewDeadline = schemas.DateTimeSchema
            status = schemas.StrSchema
            transferProtected = schemas.BoolSchema
            deletedAt = schemas.DateTimeSchema
            expires = schemas.DateTimeSchema
            exposeWhois = schemas.BoolSchema
            registrarCreatedAt = schemas.StrSchema
            subaccountId = schemas.StrSchema
            transferAwayEligibleAt = schemas.DateTimeSchema
        
            @staticmethod
            def verifications() -> typing.Type['VerificationsDomain']:
                return VerificationsDomain
            __annotations__ = {
                "authCode": authCode,
                "contactAdmin": contactAdmin,
                "contactBilling": contactBilling,
                "contactRegistrant": contactRegistrant,
                "contactTech": contactTech,
                "createdAt": createdAt,
                "domain": domain,
                "domainId": domainId,
                "expirationProtected": expirationProtected,
                "holdRegistrar": holdRegistrar,
                "locked": locked,
                "nameServers": nameServers,
                "privacy": privacy,
                "renewAuto": renewAuto,
                "renewDeadline": renewDeadline,
                "status": status,
                "transferProtected": transferProtected,
                "deletedAt": deletedAt,
                "expires": expires,
                "exposeWhois": exposeWhois,
                "registrarCreatedAt": registrarCreatedAt,
                "subaccountId": subaccountId,
                "transferAwayEligibleAt": transferAwayEligibleAt,
                "verifications": verifications,
            }

    
    expirationProtected: MetaOapg.properties.expirationProtected
    authCode: MetaOapg.properties.authCode
    holdRegistrar: MetaOapg.properties.holdRegistrar
    privacy: MetaOapg.properties.privacy
    nameServers: MetaOapg.properties.nameServers
    domainId: MetaOapg.properties.domainId
    contactBilling: 'Contact'
    createdAt: MetaOapg.properties.createdAt
    contactAdmin: 'Contact'
    domain: MetaOapg.properties.domain
    contactRegistrant: 'Contact'
    contactTech: 'Contact'
    renewDeadline: MetaOapg.properties.renewDeadline
    locked: MetaOapg.properties.locked
    renewAuto: MetaOapg.properties.renewAuto
    status: MetaOapg.properties.status
    transferProtected: MetaOapg.properties.transferProtected
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactAdmin"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactBilling"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactRegistrant"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactTech"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainId"]) -> MetaOapg.properties.domainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationProtected"]) -> MetaOapg.properties.expirationProtected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdRegistrar"]) -> MetaOapg.properties.holdRegistrar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewDeadline"]) -> MetaOapg.properties.renewDeadline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transferProtected"]) -> MetaOapg.properties.transferProtected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletedAt"]) -> MetaOapg.properties.deletedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires"]) -> MetaOapg.properties.expires: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exposeWhois"]) -> MetaOapg.properties.exposeWhois: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrarCreatedAt"]) -> MetaOapg.properties.registrarCreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subaccountId"]) -> MetaOapg.properties.subaccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transferAwayEligibleAt"]) -> MetaOapg.properties.transferAwayEligibleAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verifications"]) -> 'VerificationsDomain': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authCode", "contactAdmin", "contactBilling", "contactRegistrant", "contactTech", "createdAt", "domain", "domainId", "expirationProtected", "holdRegistrar", "locked", "nameServers", "privacy", "renewAuto", "renewDeadline", "status", "transferProtected", "deletedAt", "expires", "exposeWhois", "registrarCreatedAt", "subaccountId", "transferAwayEligibleAt", "verifications", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactAdmin"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactBilling"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactRegistrant"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactTech"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainId"]) -> MetaOapg.properties.domainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationProtected"]) -> MetaOapg.properties.expirationProtected: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdRegistrar"]) -> MetaOapg.properties.holdRegistrar: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewDeadline"]) -> MetaOapg.properties.renewDeadline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transferProtected"]) -> MetaOapg.properties.transferProtected: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletedAt"]) -> typing.Union[MetaOapg.properties.deletedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires"]) -> typing.Union[MetaOapg.properties.expires, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exposeWhois"]) -> typing.Union[MetaOapg.properties.exposeWhois, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrarCreatedAt"]) -> typing.Union[MetaOapg.properties.registrarCreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subaccountId"]) -> typing.Union[MetaOapg.properties.subaccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transferAwayEligibleAt"]) -> typing.Union[MetaOapg.properties.transferAwayEligibleAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verifications"]) -> typing.Union['VerificationsDomain', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authCode", "contactAdmin", "contactBilling", "contactRegistrant", "contactTech", "createdAt", "domain", "domainId", "expirationProtected", "holdRegistrar", "locked", "nameServers", "privacy", "renewAuto", "renewDeadline", "status", "transferProtected", "deletedAt", "expires", "exposeWhois", "registrarCreatedAt", "subaccountId", "transferAwayEligibleAt", "verifications", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        expirationProtected: typing.Union[MetaOapg.properties.expirationProtected, bool, ],
        authCode: typing.Union[MetaOapg.properties.authCode, str, ],
        holdRegistrar: typing.Union[MetaOapg.properties.holdRegistrar, bool, ],
        privacy: typing.Union[MetaOapg.properties.privacy, bool, ],
        nameServers: typing.Union[MetaOapg.properties.nameServers, list, tuple, ],
        domainId: typing.Union[MetaOapg.properties.domainId, decimal.Decimal, int, float, ],
        contactBilling: 'Contact',
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        contactAdmin: 'Contact',
        domain: typing.Union[MetaOapg.properties.domain, str, ],
        contactRegistrant: 'Contact',
        contactTech: 'Contact',
        renewDeadline: typing.Union[MetaOapg.properties.renewDeadline, str, datetime, ],
        locked: typing.Union[MetaOapg.properties.locked, bool, ],
        renewAuto: typing.Union[MetaOapg.properties.renewAuto, bool, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        transferProtected: typing.Union[MetaOapg.properties.transferProtected, bool, ],
        deletedAt: typing.Union[MetaOapg.properties.deletedAt, str, datetime, schemas.Unset] = schemas.unset,
        expires: typing.Union[MetaOapg.properties.expires, str, datetime, schemas.Unset] = schemas.unset,
        exposeWhois: typing.Union[MetaOapg.properties.exposeWhois, bool, schemas.Unset] = schemas.unset,
        registrarCreatedAt: typing.Union[MetaOapg.properties.registrarCreatedAt, str, schemas.Unset] = schemas.unset,
        subaccountId: typing.Union[MetaOapg.properties.subaccountId, str, schemas.Unset] = schemas.unset,
        transferAwayEligibleAt: typing.Union[MetaOapg.properties.transferAwayEligibleAt, str, datetime, schemas.Unset] = schemas.unset,
        verifications: typing.Union['VerificationsDomain', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainDetail':
        return super().__new__(
            cls,
            *args,
            expirationProtected=expirationProtected,
            authCode=authCode,
            holdRegistrar=holdRegistrar,
            privacy=privacy,
            nameServers=nameServers,
            domainId=domainId,
            contactBilling=contactBilling,
            createdAt=createdAt,
            contactAdmin=contactAdmin,
            domain=domain,
            contactRegistrant=contactRegistrant,
            contactTech=contactTech,
            renewDeadline=renewDeadline,
            locked=locked,
            renewAuto=renewAuto,
            status=status,
            transferProtected=transferProtected,
            deletedAt=deletedAt,
            expires=expires,
            exposeWhois=exposeWhois,
            registrarCreatedAt=registrarCreatedAt,
            subaccountId=subaccountId,
            transferAwayEligibleAt=transferAwayEligibleAt,
            verifications=verifications,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.contact import Contact
from godaddy_python_sdk.model.verifications_domain import VerificationsDomain
