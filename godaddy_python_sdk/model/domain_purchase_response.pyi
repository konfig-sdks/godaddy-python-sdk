# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainPurchaseResponse(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "total",
            "orderId",
            "itemCount",
        }
        
        class properties:
            itemCount = schemas.IntSchema
            orderId = schemas.Int64Schema
            total = schemas.IntSchema
            currency = schemas.StrSchema
            __annotations__ = {
                "itemCount": itemCount,
                "orderId": orderId,
                "total": total,
                "currency": currency,
            }

    
    total: MetaOapg.properties.total
    orderId: MetaOapg.properties.orderId
    itemCount: MetaOapg.properties.itemCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemCount"]) -> MetaOapg.properties.itemCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["itemCount", "orderId", "total", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemCount"]) -> MetaOapg.properties.itemCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["itemCount", "orderId", "total", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, ],
        orderId: typing.Union[MetaOapg.properties.orderId, decimal.Decimal, int, ],
        itemCount: typing.Union[MetaOapg.properties.itemCount, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainPurchaseResponse':
        return super().__new__(
            cls,
            *args,
            total=total,
            orderId=orderId,
            itemCount=itemCount,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )
