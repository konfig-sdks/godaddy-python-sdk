# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class Action(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "createdAt",
            "origination",
            "type",
            "status",
        }
        
        class properties:
            createdAt = schemas.StrSchema
            
            
            class origination(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "USER": "USER",
                        "SYSTEM": "SYSTEM",
                    }
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def SYSTEM(cls):
                    return cls("SYSTEM")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACCEPTED": "ACCEPTED",
                        "AWAITING": "AWAITING",
                        "CANCELLED": "CANCELLED",
                        "FAILED": "FAILED",
                        "PENDING": "PENDING",
                        "SUCCESS": "SUCCESS",
                    }
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("ACCEPTED")
                
                @schemas.classproperty
                def AWAITING(cls):
                    return cls("AWAITING")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AUTH_CODE_PURCHASE": "AUTH_CODE_PURCHASE",
                        "AUTH_CODE_REGENERATE": "AUTH_CODE_REGENERATE",
                        "AUTO_RENEWAL": "AUTO_RENEWAL",
                        "BACKORDER_PURCHASE": "BACKORDER_PURCHASE",
                        "BACKORDER_DELETE": "BACKORDER_DELETE",
                        "BACKORDER_UPDATE": "BACKORDER_UPDATE",
                        "CONTACT_CREATE": "CONTACT_CREATE",
                        "CONTACT_DELETE": "CONTACT_DELETE",
                        "CONTACT_UPDATE": "CONTACT_UPDATE",
                        "DNS_VERIFICATION": "DNS_VERIFICATION",
                        "DNSSEC_CREATE": "DNSSEC_CREATE",
                        "DNSSEC_DELETE": "DNSSEC_DELETE",
                        "DOMAIN_DELETE": "DOMAIN_DELETE",
                        "DOMAIN_UPDATE": "DOMAIN_UPDATE",
                        "DOMAIN_UPDATE_CONTACTS": "DOMAIN_UPDATE_CONTACTS",
                        "DOMAIN_UPDATE_NAME_SERVERS": "DOMAIN_UPDATE_NAME_SERVERS",
                        "EXPIRY": "EXPIRY",
                        "HOST_CREATE": "HOST_CREATE",
                        "HOST_DELETE": "HOST_DELETE",
                        "ICANN_VERIFICATION": "ICANN_VERIFICATION",
                        "MIGRATE": "MIGRATE",
                        "MIGRATE_IN": "MIGRATE_IN",
                        "PREMIUM": "PREMIUM",
                        "PRIVACY_PURCHASE": "PRIVACY_PURCHASE",
                        "PRIVACY_DELETE": "PRIVACY_DELETE",
                        "REDEEM": "REDEEM",
                        "REGISTER": "REGISTER",
                        "RENEW": "RENEW",
                        "RENEW_UNDO": "RENEW_UNDO",
                        "TRADE": "TRADE",
                        "TRADE_CANCEL": "TRADE_CANCEL",
                        "TRADE_PURCHASE": "TRADE_PURCHASE",
                        "TRADE_PURCHASE_AUTH_TEXT_MESSAGE": "TRADE_PURCHASE_AUTH_TEXT_MESSAGE",
                        "TRADE_RESEND_AUTH_EMAIL": "TRADE_RESEND_AUTH_EMAIL",
                        "TRANSFER": "TRANSFER",
                        "TRANSFER_IN": "TRANSFER_IN",
                        "TRANSFER_IN_ACCEPT": "TRANSFER_IN_ACCEPT",
                        "TRANSFER_IN_CANCEL": "TRANSFER_IN_CANCEL",
                        "TRANSFER_IN_RESTART": "TRANSFER_IN_RESTART",
                        "TRANSFER_IN_RETRY": "TRANSFER_IN_RETRY",
                        "TRANSFER_OUT": "TRANSFER_OUT",
                        "TRANSFER_OUT_ACCEPT": "TRANSFER_OUT_ACCEPT",
                        "TRANSFER_OUT_REJECT": "TRANSFER_OUT_REJECT",
                        "TRANSFER_OUT_REQUESTED": "TRANSFER_OUT_REQUESTED",
                        "TRANSIT": "TRANSIT",
                    }
                
                @schemas.classproperty
                def AUTH_CODE_PURCHASE(cls):
                    return cls("AUTH_CODE_PURCHASE")
                
                @schemas.classproperty
                def AUTH_CODE_REGENERATE(cls):
                    return cls("AUTH_CODE_REGENERATE")
                
                @schemas.classproperty
                def AUTO_RENEWAL(cls):
                    return cls("AUTO_RENEWAL")
                
                @schemas.classproperty
                def BACKORDER_PURCHASE(cls):
                    return cls("BACKORDER_PURCHASE")
                
                @schemas.classproperty
                def BACKORDER_DELETE(cls):
                    return cls("BACKORDER_DELETE")
                
                @schemas.classproperty
                def BACKORDER_UPDATE(cls):
                    return cls("BACKORDER_UPDATE")
                
                @schemas.classproperty
                def CONTACT_CREATE(cls):
                    return cls("CONTACT_CREATE")
                
                @schemas.classproperty
                def CONTACT_DELETE(cls):
                    return cls("CONTACT_DELETE")
                
                @schemas.classproperty
                def CONTACT_UPDATE(cls):
                    return cls("CONTACT_UPDATE")
                
                @schemas.classproperty
                def DNS_VERIFICATION(cls):
                    return cls("DNS_VERIFICATION")
                
                @schemas.classproperty
                def DNSSEC_CREATE(cls):
                    return cls("DNSSEC_CREATE")
                
                @schemas.classproperty
                def DNSSEC_DELETE(cls):
                    return cls("DNSSEC_DELETE")
                
                @schemas.classproperty
                def DOMAIN_DELETE(cls):
                    return cls("DOMAIN_DELETE")
                
                @schemas.classproperty
                def DOMAIN_UPDATE(cls):
                    return cls("DOMAIN_UPDATE")
                
                @schemas.classproperty
                def DOMAIN_UPDATE_CONTACTS(cls):
                    return cls("DOMAIN_UPDATE_CONTACTS")
                
                @schemas.classproperty
                def DOMAIN_UPDATE_NAME_SERVERS(cls):
                    return cls("DOMAIN_UPDATE_NAME_SERVERS")
                
                @schemas.classproperty
                def EXPIRY(cls):
                    return cls("EXPIRY")
                
                @schemas.classproperty
                def HOST_CREATE(cls):
                    return cls("HOST_CREATE")
                
                @schemas.classproperty
                def HOST_DELETE(cls):
                    return cls("HOST_DELETE")
                
                @schemas.classproperty
                def ICANN_VERIFICATION(cls):
                    return cls("ICANN_VERIFICATION")
                
                @schemas.classproperty
                def MIGRATE(cls):
                    return cls("MIGRATE")
                
                @schemas.classproperty
                def MIGRATE_IN(cls):
                    return cls("MIGRATE_IN")
                
                @schemas.classproperty
                def PREMIUM(cls):
                    return cls("PREMIUM")
                
                @schemas.classproperty
                def PRIVACY_PURCHASE(cls):
                    return cls("PRIVACY_PURCHASE")
                
                @schemas.classproperty
                def PRIVACY_DELETE(cls):
                    return cls("PRIVACY_DELETE")
                
                @schemas.classproperty
                def REDEEM(cls):
                    return cls("REDEEM")
                
                @schemas.classproperty
                def REGISTER(cls):
                    return cls("REGISTER")
                
                @schemas.classproperty
                def RENEW(cls):
                    return cls("RENEW")
                
                @schemas.classproperty
                def RENEW_UNDO(cls):
                    return cls("RENEW_UNDO")
                
                @schemas.classproperty
                def TRADE(cls):
                    return cls("TRADE")
                
                @schemas.classproperty
                def TRADE_CANCEL(cls):
                    return cls("TRADE_CANCEL")
                
                @schemas.classproperty
                def TRADE_PURCHASE(cls):
                    return cls("TRADE_PURCHASE")
                
                @schemas.classproperty
                def TRADE_PURCHASE_AUTH_TEXT_MESSAGE(cls):
                    return cls("TRADE_PURCHASE_AUTH_TEXT_MESSAGE")
                
                @schemas.classproperty
                def TRADE_RESEND_AUTH_EMAIL(cls):
                    return cls("TRADE_RESEND_AUTH_EMAIL")
                
                @schemas.classproperty
                def TRANSFER(cls):
                    return cls("TRANSFER")
                
                @schemas.classproperty
                def TRANSFER_IN(cls):
                    return cls("TRANSFER_IN")
                
                @schemas.classproperty
                def TRANSFER_IN_ACCEPT(cls):
                    return cls("TRANSFER_IN_ACCEPT")
                
                @schemas.classproperty
                def TRANSFER_IN_CANCEL(cls):
                    return cls("TRANSFER_IN_CANCEL")
                
                @schemas.classproperty
                def TRANSFER_IN_RESTART(cls):
                    return cls("TRANSFER_IN_RESTART")
                
                @schemas.classproperty
                def TRANSFER_IN_RETRY(cls):
                    return cls("TRANSFER_IN_RETRY")
                
                @schemas.classproperty
                def TRANSFER_OUT(cls):
                    return cls("TRANSFER_OUT")
                
                @schemas.classproperty
                def TRANSFER_OUT_ACCEPT(cls):
                    return cls("TRANSFER_OUT_ACCEPT")
                
                @schemas.classproperty
                def TRANSFER_OUT_REJECT(cls):
                    return cls("TRANSFER_OUT_REJECT")
                
                @schemas.classproperty
                def TRANSFER_OUT_REQUESTED(cls):
                    return cls("TRANSFER_OUT_REQUESTED")
                
                @schemas.classproperty
                def TRANSIT(cls):
                    return cls("TRANSIT")
            completedAt = schemas.StrSchema
            modifiedAt = schemas.StrSchema
        
            @staticmethod
            def reason() -> typing.Type['ActionReason']:
                return ActionReason
            requestId = schemas.StrSchema
            startedAt = schemas.StrSchema
            __annotations__ = {
                "createdAt": createdAt,
                "origination": origination,
                "status": status,
                "type": type,
                "completedAt": completedAt,
                "modifiedAt": modifiedAt,
                "reason": reason,
                "requestId": requestId,
                "startedAt": startedAt,
            }

    
    createdAt: MetaOapg.properties.createdAt
    origination: MetaOapg.properties.origination
    type: MetaOapg.properties.type
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination"]) -> MetaOapg.properties.origination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedAt"]) -> MetaOapg.properties.completedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> 'ActionReason': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startedAt"]) -> MetaOapg.properties.startedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt", "origination", "status", "type", "completedAt", "modifiedAt", "reason", "requestId", "startedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination"]) -> MetaOapg.properties.origination: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedAt"]) -> typing.Union[MetaOapg.properties.completedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> typing.Union[MetaOapg.properties.modifiedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union['ActionReason', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> typing.Union[MetaOapg.properties.requestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startedAt"]) -> typing.Union[MetaOapg.properties.startedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt", "origination", "status", "type", "completedAt", "modifiedAt", "reason", "requestId", "startedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, ],
        origination: typing.Union[MetaOapg.properties.origination, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        completedAt: typing.Union[MetaOapg.properties.completedAt, str, schemas.Unset] = schemas.unset,
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, str, schemas.Unset] = schemas.unset,
        reason: typing.Union['ActionReason', schemas.Unset] = schemas.unset,
        requestId: typing.Union[MetaOapg.properties.requestId, str, schemas.Unset] = schemas.unset,
        startedAt: typing.Union[MetaOapg.properties.startedAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Action':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            origination=origination,
            type=type,
            status=status,
            completedAt=completedAt,
            modifiedAt=modifiedAt,
            reason=reason,
            requestId=requestId,
            startedAt=startedAt,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.action_reason import ActionReason
