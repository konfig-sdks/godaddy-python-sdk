# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class Maintenance(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "maintenanceId",
            "summary",
            "createdAt",
            "reason",
            "environment",
            "modifiedAt",
            "startsAt",
            "type",
            "endsAt",
            "status",
        }
        
        class properties:
            summary = schemas.StrSchema
            createdAt = schemas.StrSchema
            endsAt = schemas.StrSchema
            
            
            class environment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OTE(cls):
                    return cls("OTE")
                
                @schemas.classproperty
                def PRODUCTION(cls):
                    return cls("PRODUCTION")
            maintenanceId = schemas.StrSchema
            modifiedAt = schemas.StrSchema
            
            
            class reason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMERGENCY(cls):
                    return cls("EMERGENCY")
                
                @schemas.classproperty
                def PLANNED(cls):
                    return cls("PLANNED")
            startsAt = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def API(cls):
                    return cls("API")
                
                @schemas.classproperty
                def REGISTRY(cls):
                    return cls("REGISTRY")
                
                @schemas.classproperty
                def UI(cls):
                    return cls("UI")
            
            
            class tlds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tlds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "summary": summary,
                "createdAt": createdAt,
                "endsAt": endsAt,
                "environment": environment,
                "maintenanceId": maintenanceId,
                "modifiedAt": modifiedAt,
                "reason": reason,
                "startsAt": startsAt,
                "status": status,
                "type": type,
                "tlds": tlds,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    maintenanceId: MetaOapg.properties.maintenanceId
    summary: MetaOapg.properties.summary
    createdAt: MetaOapg.properties.createdAt
    reason: MetaOapg.properties.reason
    environment: MetaOapg.properties.environment
    modifiedAt: MetaOapg.properties.modifiedAt
    startsAt: MetaOapg.properties.startsAt
    type: MetaOapg.properties.type
    endsAt: MetaOapg.properties.endsAt
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintenanceId"]) -> MetaOapg.properties.maintenanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startsAt"]) -> MetaOapg.properties.startsAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endsAt"]) -> MetaOapg.properties.endsAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlds"]) -> MetaOapg.properties.tlds: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maintenanceId"], typing_extensions.Literal["summary"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["reason"], typing_extensions.Literal["environment"], typing_extensions.Literal["modifiedAt"], typing_extensions.Literal["startsAt"], typing_extensions.Literal["type"], typing_extensions.Literal["endsAt"], typing_extensions.Literal["status"], typing_extensions.Literal["tlds"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintenanceId"]) -> MetaOapg.properties.maintenanceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startsAt"]) -> MetaOapg.properties.startsAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endsAt"]) -> MetaOapg.properties.endsAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlds"]) -> typing.Union[MetaOapg.properties.tlds, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maintenanceId"], typing_extensions.Literal["summary"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["reason"], typing_extensions.Literal["environment"], typing_extensions.Literal["modifiedAt"], typing_extensions.Literal["startsAt"], typing_extensions.Literal["type"], typing_extensions.Literal["endsAt"], typing_extensions.Literal["status"], typing_extensions.Literal["tlds"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        maintenanceId: typing.Union[MetaOapg.properties.maintenanceId, str, ],
        summary: typing.Union[MetaOapg.properties.summary, str, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, ],
        reason: typing.Union[MetaOapg.properties.reason, str, ],
        environment: typing.Union[MetaOapg.properties.environment, str, ],
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, str, ],
        startsAt: typing.Union[MetaOapg.properties.startsAt, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        endsAt: typing.Union[MetaOapg.properties.endsAt, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        tlds: typing.Union[MetaOapg.properties.tlds, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'Maintenance':
        return super().__new__(
            cls,
            *args,
            maintenanceId=maintenanceId,
            summary=summary,
            createdAt=createdAt,
            reason=reason,
            environment=environment,
            modifiedAt=modifiedAt,
            startsAt=startsAt,
            type=type,
            endsAt=endsAt,
            status=status,
            tlds=tlds,
            _configuration=_configuration,
        )
