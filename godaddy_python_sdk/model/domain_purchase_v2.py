# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainPurchaseV2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "domain",
            "consent",
        }
        
        class properties:
        
            @staticmethod
            def consent() -> typing.Type['ConsentV2']:
                return ConsentV2
            
            
            class domain(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'domain'
                    regex=[{
                        'pattern': r'^[^.]{1,63}.[^.]{2,}$',
                    }]
        
            @staticmethod
            def contacts() -> typing.Type['DomainContactsCreateV2']:
                return DomainContactsCreateV2
            metadata = schemas.DictSchema
            
            
            class nameServers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 2
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameServers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class period(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    format = 'integer-positive'
                    inclusive_maximum = 10
                    inclusive_minimum = 1
            privacy = schemas.BoolSchema
            renewAuto = schemas.BoolSchema
            __annotations__ = {
                "consent": consent,
                "domain": domain,
                "contacts": contacts,
                "metadata": metadata,
                "nameServers": nameServers,
                "period": period,
                "privacy": privacy,
                "renewAuto": renewAuto,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    domain: MetaOapg.properties.domain
    consent: 'ConsentV2'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consent"]) -> 'ConsentV2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> 'DomainContactsCreateV2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameServers"]) -> MetaOapg.properties.nameServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewAuto"]) -> MetaOapg.properties.renewAuto: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain"], typing_extensions.Literal["consent"], typing_extensions.Literal["contacts"], typing_extensions.Literal["metadata"], typing_extensions.Literal["nameServers"], typing_extensions.Literal["period"], typing_extensions.Literal["privacy"], typing_extensions.Literal["renewAuto"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consent"]) -> 'ConsentV2': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union['DomainContactsCreateV2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameServers"]) -> typing.Union[MetaOapg.properties.nameServers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> typing.Union[MetaOapg.properties.privacy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewAuto"]) -> typing.Union[MetaOapg.properties.renewAuto, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain"], typing_extensions.Literal["consent"], typing_extensions.Literal["contacts"], typing_extensions.Literal["metadata"], typing_extensions.Literal["nameServers"], typing_extensions.Literal["period"], typing_extensions.Literal["privacy"], typing_extensions.Literal["renewAuto"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        domain: typing.Union[MetaOapg.properties.domain, str, ],
        consent: 'ConsentV2',
        contacts: typing.Union['DomainContactsCreateV2', schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nameServers: typing.Union[MetaOapg.properties.nameServers, list, tuple, schemas.Unset] = schemas.unset,
        period: typing.Union[MetaOapg.properties.period, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        privacy: typing.Union[MetaOapg.properties.privacy, bool, schemas.Unset] = schemas.unset,
        renewAuto: typing.Union[MetaOapg.properties.renewAuto, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'DomainPurchaseV2':
        return super().__new__(
            cls,
            *args,
            domain=domain,
            consent=consent,
            contacts=contacts,
            metadata=metadata,
            nameServers=nameServers,
            period=period,
            privacy=privacy,
            renewAuto=renewAuto,
            _configuration=_configuration,
        )

from godaddy_python_sdk.model.consent_v2 import ConsentV2
from godaddy_python_sdk.model.domain_contacts_create_v2 import DomainContactsCreateV2
