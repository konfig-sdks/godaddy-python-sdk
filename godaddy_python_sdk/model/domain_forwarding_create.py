# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401


class DomainForwardingCreate(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
            "url",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MASKED": "MASKED",
                        "REDIRECT_PERMANENT": "REDIRECT_PERMANENT",
                        "REDIRECT_TEMPORARY": "REDIRECT_TEMPORARY",
                    }
                
                @schemas.classproperty
                def MASKED(cls):
                    return cls("MASKED")
                
                @schemas.classproperty
                def REDIRECT_PERMANENT(cls):
                    return cls("REDIRECT_PERMANENT")
                
                @schemas.classproperty
                def REDIRECT_TEMPORARY(cls):
                    return cls("REDIRECT_TEMPORARY")
            url = schemas.StrSchema
        
            @staticmethod
            def mask() -> typing.Type['DomainForwardingMask']:
                return DomainForwardingMask
            __annotations__ = {
                "type": type,
                "url": url,
                "mask": mask,
            }

    
    type: MetaOapg.properties.type
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask"]) -> 'DomainForwardingMask': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "url", "mask", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask"]) -> typing.Union['DomainForwardingMask', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "url", "mask", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        mask: typing.Union['DomainForwardingMask', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DomainForwardingCreate':
        return super().__new__(
            cls,
            *args,
            type=type,
            url=url,
            mask=mask,
            _configuration=_configuration,
            **kwargs,
        )

from godaddy_python_sdk.model.domain_forwarding_mask import DomainForwardingMask
