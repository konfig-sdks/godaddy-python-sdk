# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from godaddy_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from godaddy_python_sdk.api_response import AsyncGeneratorResponse
from godaddy_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401

from godaddy_python_sdk.model.v1_get_domains_list200_response import V1GetDomainsList200Response as V1GetDomainsList200ResponseSchema
from godaddy_python_sdk.model.error import Error as ErrorSchema
from godaddy_python_sdk.model.v1_get_domains_list200_response2 import V1GetDomainsList200Response2 as V1GetDomainsList200Response2Schema
from godaddy_python_sdk.model.v1_get_domains_list_response import V1GetDomainsListResponse as V1GetDomainsListResponseSchema
from godaddy_python_sdk.model.v1_get_domains_list200_response1 import V1GetDomainsList200Response1 as V1GetDomainsList200Response1Schema
from godaddy_python_sdk.model.error_limit import ErrorLimit as ErrorLimitSchema
from godaddy_python_sdk.model.v1_get_domains_list200_response3 import V1GetDomainsList200Response3 as V1GetDomainsList200Response3Schema

from godaddy_python_sdk.type.v1_get_domains_list200_response2 import V1GetDomainsList200Response2
from godaddy_python_sdk.type.v1_get_domains_list200_response import V1GetDomainsList200Response
from godaddy_python_sdk.type.v1_get_domains_list_response import V1GetDomainsListResponse
from godaddy_python_sdk.type.error import Error
from godaddy_python_sdk.type.v1_get_domains_list200_response3 import V1GetDomainsList200Response3
from godaddy_python_sdk.type.error_limit import ErrorLimit
from godaddy_python_sdk.type.v1_get_domains_list200_response1 import V1GetDomainsList200Response1

from ...api_client import Dictionary
from godaddy_python_sdk.pydantic.v1_get_domains_list_response import V1GetDomainsListResponse as V1GetDomainsListResponsePydantic
from godaddy_python_sdk.pydantic.error_limit import ErrorLimit as ErrorLimitPydantic
from godaddy_python_sdk.pydantic.v1_get_domains_list200_response import V1GetDomainsList200Response as V1GetDomainsList200ResponsePydantic
from godaddy_python_sdk.pydantic.error import Error as ErrorPydantic
from godaddy_python_sdk.pydantic.v1_get_domains_list200_response1 import V1GetDomainsList200Response1 as V1GetDomainsList200Response1Pydantic
from godaddy_python_sdk.pydantic.v1_get_domains_list200_response3 import V1GetDomainsList200Response3 as V1GetDomainsList200Response3Pydantic
from godaddy_python_sdk.pydantic.v1_get_domains_list200_response2 import V1GetDomainsList200Response2 as V1GetDomainsList200Response2Pydantic

# Query params


class StatusesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def ACTIVE(cls):
                return cls("ACTIVE")
            
            @schemas.classproperty
            def AWAITING_CLAIM_ACK(cls):
                return cls("AWAITING_CLAIM_ACK")
            
            @schemas.classproperty
            def AWAITING_DOCUMENT_AFTER_TRANSFER(cls):
                return cls("AWAITING_DOCUMENT_AFTER_TRANSFER")
            
            @schemas.classproperty
            def AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT(cls):
                return cls("AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT")
            
            @schemas.classproperty
            def AWAITING_DOCUMENT_UPLOAD(cls):
                return cls("AWAITING_DOCUMENT_UPLOAD")
            
            @schemas.classproperty
            def AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY(cls):
                return cls("AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY")
            
            @schemas.classproperty
            def AWAITING_PAYMENT(cls):
                return cls("AWAITING_PAYMENT")
            
            @schemas.classproperty
            def AWAITING_RENEWAL_TRANSFER_IN_COMPLETE(cls):
                return cls("AWAITING_RENEWAL_TRANSFER_IN_COMPLETE")
            
            @schemas.classproperty
            def AWAITING_TRANSFER_IN_ACK(cls):
                return cls("AWAITING_TRANSFER_IN_ACK")
            
            @schemas.classproperty
            def AWAITING_TRANSFER_IN_AUTH(cls):
                return cls("AWAITING_TRANSFER_IN_AUTH")
            
            @schemas.classproperty
            def AWAITING_TRANSFER_IN_AUTO(cls):
                return cls("AWAITING_TRANSFER_IN_AUTO")
            
            @schemas.classproperty
            def AWAITING_TRANSFER_IN_WHOIS(cls):
                return cls("AWAITING_TRANSFER_IN_WHOIS")
            
            @schemas.classproperty
            def AWAITING_TRANSFER_IN_WHOIS_FIX(cls):
                return cls("AWAITING_TRANSFER_IN_WHOIS_FIX")
            
            @schemas.classproperty
            def AWAITING_VERIFICATION_ICANN(cls):
                return cls("AWAITING_VERIFICATION_ICANN")
            
            @schemas.classproperty
            def AWAITING_VERIFICATION_ICANN_MANUAL(cls):
                return cls("AWAITING_VERIFICATION_ICANN_MANUAL")
            
            @schemas.classproperty
            def CANCELLED(cls):
                return cls("CANCELLED")
            
            @schemas.classproperty
            def CANCELLED_HELD(cls):
                return cls("CANCELLED_HELD")
            
            @schemas.classproperty
            def CANCELLED_REDEEMABLE(cls):
                return cls("CANCELLED_REDEEMABLE")
            
            @schemas.classproperty
            def CANCELLED_TRANSFER(cls):
                return cls("CANCELLED_TRANSFER")
            
            @schemas.classproperty
            def CONFISCATED(cls):
                return cls("CONFISCATED")
            
            @schemas.classproperty
            def DISABLED_SPECIAL(cls):
                return cls("DISABLED_SPECIAL")
            
            @schemas.classproperty
            def EXCLUDED_INVALID_CLAIM_FIREHOSE(cls):
                return cls("EXCLUDED_INVALID_CLAIM_FIREHOSE")
            
            @schemas.classproperty
            def EXPIRED_REASSIGNED(cls):
                return cls("EXPIRED_REASSIGNED")
            
            @schemas.classproperty
            def FAILED_BACKORDER_CAPTURE(cls):
                return cls("FAILED_BACKORDER_CAPTURE")
            
            @schemas.classproperty
            def FAILED_DROP_IMMEDIATE_THEN_ADD(cls):
                return cls("FAILED_DROP_IMMEDIATE_THEN_ADD")
            
            @schemas.classproperty
            def FAILED_PRE_REGISTRATION(cls):
                return cls("FAILED_PRE_REGISTRATION")
            
            @schemas.classproperty
            def FAILED_REDEMPTION(cls):
                return cls("FAILED_REDEMPTION")
            
            @schemas.classproperty
            def FAILED_REDEMPTION_REPORT(cls):
                return cls("FAILED_REDEMPTION_REPORT")
            
            @schemas.classproperty
            def FAILED_REGISTRATION(cls):
                return cls("FAILED_REGISTRATION")
            
            @schemas.classproperty
            def FAILED_REGISTRATION_FIREHOSE(cls):
                return cls("FAILED_REGISTRATION_FIREHOSE")
            
            @schemas.classproperty
            def FAILED_RESTORATION_REDEMPTION_MOCK(cls):
                return cls("FAILED_RESTORATION_REDEMPTION_MOCK")
            
            @schemas.classproperty
            def FAILED_SETUP(cls):
                return cls("FAILED_SETUP")
            
            @schemas.classproperty
            def FAILED_TRANSFER_IN(cls):
                return cls("FAILED_TRANSFER_IN")
            
            @schemas.classproperty
            def FAILED_TRANSFER_IN_BAD_STATUS(cls):
                return cls("FAILED_TRANSFER_IN_BAD_STATUS")
            
            @schemas.classproperty
            def FAILED_TRANSFER_IN_REGISTRY(cls):
                return cls("FAILED_TRANSFER_IN_REGISTRY")
            
            @schemas.classproperty
            def HELD_COURT_ORDERED(cls):
                return cls("HELD_COURT_ORDERED")
            
            @schemas.classproperty
            def HELD_DISPUTED(cls):
                return cls("HELD_DISPUTED")
            
            @schemas.classproperty
            def HELD_EXPIRATION_PROTECTION(cls):
                return cls("HELD_EXPIRATION_PROTECTION")
            
            @schemas.classproperty
            def HELD_EXPIRED_REDEMPTION_MOCK(cls):
                return cls("HELD_EXPIRED_REDEMPTION_MOCK")
            
            @schemas.classproperty
            def HELD_REGISTRAR_ADD(cls):
                return cls("HELD_REGISTRAR_ADD")
            
            @schemas.classproperty
            def HELD_REGISTRAR_REMOVE(cls):
                return cls("HELD_REGISTRAR_REMOVE")
            
            @schemas.classproperty
            def HELD_SHOPPER(cls):
                return cls("HELD_SHOPPER")
            
            @schemas.classproperty
            def HELD_TEMPORARY(cls):
                return cls("HELD_TEMPORARY")
            
            @schemas.classproperty
            def LOCKED_ABUSE(cls):
                return cls("LOCKED_ABUSE")
            
            @schemas.classproperty
            def LOCKED_COPYRIGHT(cls):
                return cls("LOCKED_COPYRIGHT")
            
            @schemas.classproperty
            def LOCKED_REGISTRY(cls):
                return cls("LOCKED_REGISTRY")
            
            @schemas.classproperty
            def LOCKED_SUPER(cls):
                return cls("LOCKED_SUPER")
            
            @schemas.classproperty
            def PARKED_AND_HELD(cls):
                return cls("PARKED_AND_HELD")
            
            @schemas.classproperty
            def PARKED_EXPIRED(cls):
                return cls("PARKED_EXPIRED")
            
            @schemas.classproperty
            def PARKED_VERIFICATION_ICANN(cls):
                return cls("PARKED_VERIFICATION_ICANN")
            
            @schemas.classproperty
            def PENDING_ABORT_CANCEL_SETUP(cls):
                return cls("PENDING_ABORT_CANCEL_SETUP")
            
            @schemas.classproperty
            def PENDING_AGREEMENT_PRE_REGISTRATION(cls):
                return cls("PENDING_AGREEMENT_PRE_REGISTRATION")
            
            @schemas.classproperty
            def PENDING_APPLY_RENEWAL_CREDITS(cls):
                return cls("PENDING_APPLY_RENEWAL_CREDITS")
            
            @schemas.classproperty
            def PENDING_BACKORDER_CAPTURE(cls):
                return cls("PENDING_BACKORDER_CAPTURE")
            
            @schemas.classproperty
            def PENDING_BLOCKED_REGISTRY(cls):
                return cls("PENDING_BLOCKED_REGISTRY")
            
            @schemas.classproperty
            def PENDING_CANCEL_REGISTRANT_PROFILE(cls):
                return cls("PENDING_CANCEL_REGISTRANT_PROFILE")
            
            @schemas.classproperty
            def PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT(cls):
                return cls("PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT")
            
            @schemas.classproperty
            def PENDING_COMPLETE_REGISTRANT_PROFILE(cls):
                return cls("PENDING_COMPLETE_REGISTRANT_PROFILE")
            
            @schemas.classproperty
            def PENDING_COO(cls):
                return cls("PENDING_COO")
            
            @schemas.classproperty
            def PENDING_COO_COMPLETE(cls):
                return cls("PENDING_COO_COMPLETE")
            
            @schemas.classproperty
            def PENDING_DNS(cls):
                return cls("PENDING_DNS")
            
            @schemas.classproperty
            def PENDING_DNS_ACTIVE(cls):
                return cls("PENDING_DNS_ACTIVE")
            
            @schemas.classproperty
            def PENDING_DNS_INACTIVE(cls):
                return cls("PENDING_DNS_INACTIVE")
            
            @schemas.classproperty
            def PENDING_DOCUMENT_VALIDATION(cls):
                return cls("PENDING_DOCUMENT_VALIDATION")
            
            @schemas.classproperty
            def PENDING_DOCUMENT_VERIFICATION(cls):
                return cls("PENDING_DOCUMENT_VERIFICATION")
            
            @schemas.classproperty
            def PENDING_DROP_IMMEDIATE(cls):
                return cls("PENDING_DROP_IMMEDIATE")
            
            @schemas.classproperty
            def PENDING_DROP_IMMEDIATE_THEN_ADD(cls):
                return cls("PENDING_DROP_IMMEDIATE_THEN_ADD")
            
            @schemas.classproperty
            def PENDING_EPP_CREATE(cls):
                return cls("PENDING_EPP_CREATE")
            
            @schemas.classproperty
            def PENDING_EPP_DELETE(cls):
                return cls("PENDING_EPP_DELETE")
            
            @schemas.classproperty
            def PENDING_EPP_UPDATE(cls):
                return cls("PENDING_EPP_UPDATE")
            
            @schemas.classproperty
            def PENDING_ESCALATION_REGISTRY(cls):
                return cls("PENDING_ESCALATION_REGISTRY")
            
            @schemas.classproperty
            def PENDING_EXPIRATION(cls):
                return cls("PENDING_EXPIRATION")
            
            @schemas.classproperty
            def PENDING_EXPIRATION_RESPONSE(cls):
                return cls("PENDING_EXPIRATION_RESPONSE")
            
            @schemas.classproperty
            def PENDING_EXPIRATION_SYNC(cls):
                return cls("PENDING_EXPIRATION_SYNC")
            
            @schemas.classproperty
            def PENDING_EXPIRED_REASSIGNMENT(cls):
                return cls("PENDING_EXPIRED_REASSIGNMENT")
            
            @schemas.classproperty
            def PENDING_EXPIRE_AUTO_ADD(cls):
                return cls("PENDING_EXPIRE_AUTO_ADD")
            
            @schemas.classproperty
            def PENDING_EXTEND_REGISTRANT_PROFILE(cls):
                return cls("PENDING_EXTEND_REGISTRANT_PROFILE")
            
            @schemas.classproperty
            def PENDING_FAILED_COO(cls):
                return cls("PENDING_FAILED_COO")
            
            @schemas.classproperty
            def PENDING_FAILED_EPP_CREATE(cls):
                return cls("PENDING_FAILED_EPP_CREATE")
            
            @schemas.classproperty
            def PENDING_FAILED_HELD(cls):
                return cls("PENDING_FAILED_HELD")
            
            @schemas.classproperty
            def PENDING_FAILED_PURCHASE_PREMIUM(cls):
                return cls("PENDING_FAILED_PURCHASE_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_RECONCILE_FIREHOSE(cls):
                return cls("PENDING_FAILED_RECONCILE_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT(cls):
                return cls("PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT")
            
            @schemas.classproperty
            def PENDING_FAILED_RELEASE_PREMIUM(cls):
                return cls("PENDING_FAILED_RELEASE_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_RENEW_EXPIRATION_PROTECTION(cls):
                return cls("PENDING_FAILED_RENEW_EXPIRATION_PROTECTION")
            
            @schemas.classproperty
            def PENDING_FAILED_RESERVE_PREMIUM(cls):
                return cls("PENDING_FAILED_RESERVE_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_SUBMIT_FIREHOSE(cls):
                return cls("PENDING_FAILED_SUBMIT_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_FAILED_TRANSFER_ACK_PREMIUM(cls):
                return cls("PENDING_FAILED_TRANSFER_ACK_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM(cls):
                return cls("PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_TRANSFER_IN_PREMIUM(cls):
                return cls("PENDING_FAILED_TRANSFER_IN_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_TRANSFER_PREMIUM(cls):
                return cls("PENDING_FAILED_TRANSFER_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM(cls):
                return cls("PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_UNLOCK_PREMIUM(cls):
                return cls("PENDING_FAILED_UNLOCK_PREMIUM")
            
            @schemas.classproperty
            def PENDING_FAILED_UPDATE_API(cls):
                return cls("PENDING_FAILED_UPDATE_API")
            
            @schemas.classproperty
            def PENDING_FRAUD_VERIFICATION(cls):
                return cls("PENDING_FRAUD_VERIFICATION")
            
            @schemas.classproperty
            def PENDING_FRAUD_VERIFIED(cls):
                return cls("PENDING_FRAUD_VERIFIED")
            
            @schemas.classproperty
            def PENDING_GET_CONTACTS(cls):
                return cls("PENDING_GET_CONTACTS")
            
            @schemas.classproperty
            def PENDING_GET_HOSTS(cls):
                return cls("PENDING_GET_HOSTS")
            
            @schemas.classproperty
            def PENDING_GET_NAME_SERVERS(cls):
                return cls("PENDING_GET_NAME_SERVERS")
            
            @schemas.classproperty
            def PENDING_GET_STATUS(cls):
                return cls("PENDING_GET_STATUS")
            
            @schemas.classproperty
            def PENDING_HOLD_ESCROW(cls):
                return cls("PENDING_HOLD_ESCROW")
            
            @schemas.classproperty
            def PENDING_HOLD_REDEMPTION(cls):
                return cls("PENDING_HOLD_REDEMPTION")
            
            @schemas.classproperty
            def PENDING_LOCK_CLIENT_REMOVE(cls):
                return cls("PENDING_LOCK_CLIENT_REMOVE")
            
            @schemas.classproperty
            def PENDING_LOCK_DATA_QUALITY(cls):
                return cls("PENDING_LOCK_DATA_QUALITY")
            
            @schemas.classproperty
            def PENDING_LOCK_THEN_HOLD_REDEMPTION(cls):
                return cls("PENDING_LOCK_THEN_HOLD_REDEMPTION")
            
            @schemas.classproperty
            def PENDING_PARKING_DETERMINATION(cls):
                return cls("PENDING_PARKING_DETERMINATION")
            
            @schemas.classproperty
            def PENDING_PARK_INVALID_WHOIS(cls):
                return cls("PENDING_PARK_INVALID_WHOIS")
            
            @schemas.classproperty
            def PENDING_PARK_INVALID_WHOIS_REMOVAL(cls):
                return cls("PENDING_PARK_INVALID_WHOIS_REMOVAL")
            
            @schemas.classproperty
            def PENDING_PURCHASE_PREMIUM(cls):
                return cls("PENDING_PURCHASE_PREMIUM")
            
            @schemas.classproperty
            def PENDING_RECONCILE(cls):
                return cls("PENDING_RECONCILE")
            
            @schemas.classproperty
            def PENDING_RECONCILE_FIREHOSE(cls):
                return cls("PENDING_RECONCILE_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_REDEMPTION(cls):
                return cls("PENDING_REDEMPTION")
            
            @schemas.classproperty
            def PENDING_REDEMPTION_REPORT(cls):
                return cls("PENDING_REDEMPTION_REPORT")
            
            @schemas.classproperty
            def PENDING_REDEMPTION_REPORT_COMPLETE(cls):
                return cls("PENDING_REDEMPTION_REPORT_COMPLETE")
            
            @schemas.classproperty
            def PENDING_REDEMPTION_REPORT_SUBMITTED(cls):
                return cls("PENDING_REDEMPTION_REPORT_SUBMITTED")
            
            @schemas.classproperty
            def PENDING_REDEMPTION_WITHOUT_RECEIPT(cls):
                return cls("PENDING_REDEMPTION_WITHOUT_RECEIPT")
            
            @schemas.classproperty
            def PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK(cls):
                return cls("PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK")
            
            @schemas.classproperty
            def PENDING_RELEASE_PREMIUM(cls):
                return cls("PENDING_RELEASE_PREMIUM")
            
            @schemas.classproperty
            def PENDING_REMOVAL(cls):
                return cls("PENDING_REMOVAL")
            
            @schemas.classproperty
            def PENDING_REMOVAL_HELD(cls):
                return cls("PENDING_REMOVAL_HELD")
            
            @schemas.classproperty
            def PENDING_REMOVAL_PARKED(cls):
                return cls("PENDING_REMOVAL_PARKED")
            
            @schemas.classproperty
            def PENDING_REMOVAL_UNPARK(cls):
                return cls("PENDING_REMOVAL_UNPARK")
            
            @schemas.classproperty
            def PENDING_RENEWAL(cls):
                return cls("PENDING_RENEWAL")
            
            @schemas.classproperty
            def PENDING_RENEW_EXPIRATION_PROTECTION(cls):
                return cls("PENDING_RENEW_EXPIRATION_PROTECTION")
            
            @schemas.classproperty
            def PENDING_RENEW_INFINITE(cls):
                return cls("PENDING_RENEW_INFINITE")
            
            @schemas.classproperty
            def PENDING_RENEW_LOCKED(cls):
                return cls("PENDING_RENEW_LOCKED")
            
            @schemas.classproperty
            def PENDING_RENEW_WITHOUT_RECEIPT(cls):
                return cls("PENDING_RENEW_WITHOUT_RECEIPT")
            
            @schemas.classproperty
            def PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT(cls):
                return cls("PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT")
            
            @schemas.classproperty
            def PENDING_RESERVE_PREMIUM(cls):
                return cls("PENDING_RESERVE_PREMIUM")
            
            @schemas.classproperty
            def PENDING_RESET_VERIFICATION_ICANN(cls):
                return cls("PENDING_RESET_VERIFICATION_ICANN")
            
            @schemas.classproperty
            def PENDING_RESPONSE_FIREHOSE(cls):
                return cls("PENDING_RESPONSE_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_RESTORATION(cls):
                return cls("PENDING_RESTORATION")
            
            @schemas.classproperty
            def PENDING_RESTORATION_INACTIVE(cls):
                return cls("PENDING_RESTORATION_INACTIVE")
            
            @schemas.classproperty
            def PENDING_RESTORATION_REDEMPTION_MOCK(cls):
                return cls("PENDING_RESTORATION_REDEMPTION_MOCK")
            
            @schemas.classproperty
            def PENDING_RETRY_EPP_CREATE(cls):
                return cls("PENDING_RETRY_EPP_CREATE")
            
            @schemas.classproperty
            def PENDING_RETRY_HELD(cls):
                return cls("PENDING_RETRY_HELD")
            
            @schemas.classproperty
            def PENDING_SEND_AUTH_CODE(cls):
                return cls("PENDING_SEND_AUTH_CODE")
            
            @schemas.classproperty
            def PENDING_SETUP(cls):
                return cls("PENDING_SETUP")
            
            @schemas.classproperty
            def PENDING_SETUP_ABANDON(cls):
                return cls("PENDING_SETUP_ABANDON")
            
            @schemas.classproperty
            def PENDING_SETUP_AGREEMENT_LANDRUSH(cls):
                return cls("PENDING_SETUP_AGREEMENT_LANDRUSH")
            
            @schemas.classproperty
            def PENDING_SETUP_AGREEMENT_SUNRISE2_A(cls):
                return cls("PENDING_SETUP_AGREEMENT_SUNRISE2_A")
            
            @schemas.classproperty
            def PENDING_SETUP_AGREEMENT_SUNRISE2_B(cls):
                return cls("PENDING_SETUP_AGREEMENT_SUNRISE2_B")
            
            @schemas.classproperty
            def PENDING_SETUP_AGREEMENT_SUNRISE2_C(cls):
                return cls("PENDING_SETUP_AGREEMENT_SUNRISE2_C")
            
            @schemas.classproperty
            def PENDING_SETUP_AUTH(cls):
                return cls("PENDING_SETUP_AUTH")
            
            @schemas.classproperty
            def PENDING_SETUP_DNS(cls):
                return cls("PENDING_SETUP_DNS")
            
            @schemas.classproperty
            def PENDING_SETUP_FAILED(cls):
                return cls("PENDING_SETUP_FAILED")
            
            @schemas.classproperty
            def PENDING_SETUP_REVIEW(cls):
                return cls("PENDING_SETUP_REVIEW")
            
            @schemas.classproperty
            def PENDING_SETUP_SUNRISE(cls):
                return cls("PENDING_SETUP_SUNRISE")
            
            @schemas.classproperty
            def PENDING_SETUP_SUNRISE_PRE(cls):
                return cls("PENDING_SETUP_SUNRISE_PRE")
            
            @schemas.classproperty
            def PENDING_SETUP_SUNRISE_RESPONSE(cls):
                return cls("PENDING_SETUP_SUNRISE_RESPONSE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_FAILURE(cls):
                return cls("PENDING_SUBMIT_FAILURE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_FIREHOSE(cls):
                return cls("PENDING_SUBMIT_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_HOLD_FIREHOSE(cls):
                return cls("PENDING_SUBMIT_HOLD_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_HOLD_LANDRUSH(cls):
                return cls("PENDING_SUBMIT_HOLD_LANDRUSH")
            
            @schemas.classproperty
            def PENDING_SUBMIT_HOLD_SUNRISE(cls):
                return cls("PENDING_SUBMIT_HOLD_SUNRISE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_LANDRUSH(cls):
                return cls("PENDING_SUBMIT_LANDRUSH")
            
            @schemas.classproperty
            def PENDING_SUBMIT_RESPONSE_FIREHOSE(cls):
                return cls("PENDING_SUBMIT_RESPONSE_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_RESPONSE_LANDRUSH(cls):
                return cls("PENDING_SUBMIT_RESPONSE_LANDRUSH")
            
            @schemas.classproperty
            def PENDING_SUBMIT_RESPONSE_SUNRISE(cls):
                return cls("PENDING_SUBMIT_RESPONSE_SUNRISE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_SUCCESS_FIREHOSE(cls):
                return cls("PENDING_SUBMIT_SUCCESS_FIREHOSE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_SUCCESS_LANDRUSH(cls):
                return cls("PENDING_SUBMIT_SUCCESS_LANDRUSH")
            
            @schemas.classproperty
            def PENDING_SUBMIT_SUCCESS_SUNRISE(cls):
                return cls("PENDING_SUBMIT_SUCCESS_SUNRISE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_SUNRISE(cls):
                return cls("PENDING_SUBMIT_SUNRISE")
            
            @schemas.classproperty
            def PENDING_SUBMIT_WAITING_LANDRUSH(cls):
                return cls("PENDING_SUBMIT_WAITING_LANDRUSH")
            
            @schemas.classproperty
            def PENDING_SUCCESS_PRE_REGISTRATION(cls):
                return cls("PENDING_SUCCESS_PRE_REGISTRATION")
            
            @schemas.classproperty
            def PENDING_SUSPENDED_DATA_QUALITY(cls):
                return cls("PENDING_SUSPENDED_DATA_QUALITY")
            
            @schemas.classproperty
            def PENDING_TRANSFER_ACK_PREMIUM(cls):
                return cls("PENDING_TRANSFER_ACK_PREMIUM")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN(cls):
                return cls("PENDING_TRANSFER_IN")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_ACK(cls):
                return cls("PENDING_TRANSFER_IN_ACK")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_ACK_PREMIUM(cls):
                return cls("PENDING_TRANSFER_IN_ACK_PREMIUM")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_BAD_REGISTRANT(cls):
                return cls("PENDING_TRANSFER_IN_BAD_REGISTRANT")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_CANCEL(cls):
                return cls("PENDING_TRANSFER_IN_CANCEL")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_CANCEL_REGISTRY(cls):
                return cls("PENDING_TRANSFER_IN_CANCEL_REGISTRY")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_COMPLETE_ACK(cls):
                return cls("PENDING_TRANSFER_IN_COMPLETE_ACK")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_DELETE(cls):
                return cls("PENDING_TRANSFER_IN_DELETE")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_LOCK(cls):
                return cls("PENDING_TRANSFER_IN_LOCK")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_NACK(cls):
                return cls("PENDING_TRANSFER_IN_NACK")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_NOTIFICATION(cls):
                return cls("PENDING_TRANSFER_IN_NOTIFICATION")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_PREMIUM(cls):
                return cls("PENDING_TRANSFER_IN_PREMIUM")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_RELEASE(cls):
                return cls("PENDING_TRANSFER_IN_RELEASE")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_RESPONSE(cls):
                return cls("PENDING_TRANSFER_IN_RESPONSE")
            
            @schemas.classproperty
            def PENDING_TRANSFER_IN_UNDERAGE(cls):
                return cls("PENDING_TRANSFER_IN_UNDERAGE")
            
            @schemas.classproperty
            def PENDING_TRANSFER_OUT(cls):
                return cls("PENDING_TRANSFER_OUT")
            
            @schemas.classproperty
            def PENDING_TRANSFER_OUT_ACK(cls):
                return cls("PENDING_TRANSFER_OUT_ACK")
            
            @schemas.classproperty
            def PENDING_TRANSFER_OUT_NACK(cls):
                return cls("PENDING_TRANSFER_OUT_NACK")
            
            @schemas.classproperty
            def PENDING_TRANSFER_OUT_PREMIUM(cls):
                return cls("PENDING_TRANSFER_OUT_PREMIUM")
            
            @schemas.classproperty
            def PENDING_TRANSFER_OUT_UNDERAGE(cls):
                return cls("PENDING_TRANSFER_OUT_UNDERAGE")
            
            @schemas.classproperty
            def PENDING_TRANSFER_OUT_VALIDATION(cls):
                return cls("PENDING_TRANSFER_OUT_VALIDATION")
            
            @schemas.classproperty
            def PENDING_TRANSFER_PREMIUM(cls):
                return cls("PENDING_TRANSFER_PREMIUM")
            
            @schemas.classproperty
            def PENDING_TRANSFER_PREMUIM(cls):
                return cls("PENDING_TRANSFER_PREMUIM")
            
            @schemas.classproperty
            def PENDING_TRANSFER_SUBMIT_PREMIUM(cls):
                return cls("PENDING_TRANSFER_SUBMIT_PREMIUM")
            
            @schemas.classproperty
            def PENDING_UNLOCK_DATA_QUALITY(cls):
                return cls("PENDING_UNLOCK_DATA_QUALITY")
            
            @schemas.classproperty
            def PENDING_UNLOCK_PREMIUM(cls):
                return cls("PENDING_UNLOCK_PREMIUM")
            
            @schemas.classproperty
            def PENDING_UPDATE(cls):
                return cls("PENDING_UPDATE")
            
            @schemas.classproperty
            def PENDING_UPDATED_REGISTRANT_DATA_QUALITY(cls):
                return cls("PENDING_UPDATED_REGISTRANT_DATA_QUALITY")
            
            @schemas.classproperty
            def PENDING_UPDATE_ACCOUNT(cls):
                return cls("PENDING_UPDATE_ACCOUNT")
            
            @schemas.classproperty
            def PENDING_UPDATE_API(cls):
                return cls("PENDING_UPDATE_API")
            
            @schemas.classproperty
            def PENDING_UPDATE_API_RESPONSE(cls):
                return cls("PENDING_UPDATE_API_RESPONSE")
            
            @schemas.classproperty
            def PENDING_UPDATE_AUTH(cls):
                return cls("PENDING_UPDATE_AUTH")
            
            @schemas.classproperty
            def PENDING_UPDATE_CONTACTS(cls):
                return cls("PENDING_UPDATE_CONTACTS")
            
            @schemas.classproperty
            def PENDING_UPDATE_CONTACTS_PRIVACY(cls):
                return cls("PENDING_UPDATE_CONTACTS_PRIVACY")
            
            @schemas.classproperty
            def PENDING_UPDATE_DNS(cls):
                return cls("PENDING_UPDATE_DNS")
            
            @schemas.classproperty
            def PENDING_UPDATE_DNS_SECURITY(cls):
                return cls("PENDING_UPDATE_DNS_SECURITY")
            
            @schemas.classproperty
            def PENDING_UPDATE_ELIGIBILITY(cls):
                return cls("PENDING_UPDATE_ELIGIBILITY")
            
            @schemas.classproperty
            def PENDING_UPDATE_EPP_CONTACTS(cls):
                return cls("PENDING_UPDATE_EPP_CONTACTS")
            
            @schemas.classproperty
            def PENDING_UPDATE_MEMBERSHIP(cls):
                return cls("PENDING_UPDATE_MEMBERSHIP")
            
            @schemas.classproperty
            def PENDING_UPDATE_OWNERSHIP(cls):
                return cls("PENDING_UPDATE_OWNERSHIP")
            
            @schemas.classproperty
            def PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION(cls):
                return cls("PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION")
            
            @schemas.classproperty
            def PENDING_UPDATE_OWNERSHIP_HELD(cls):
                return cls("PENDING_UPDATE_OWNERSHIP_HELD")
            
            @schemas.classproperty
            def PENDING_UPDATE_REGISTRANT(cls):
                return cls("PENDING_UPDATE_REGISTRANT")
            
            @schemas.classproperty
            def PENDING_UPDATE_REPO(cls):
                return cls("PENDING_UPDATE_REPO")
            
            @schemas.classproperty
            def PENDING_VALIDATION_DATA_QUALITY(cls):
                return cls("PENDING_VALIDATION_DATA_QUALITY")
            
            @schemas.classproperty
            def PENDING_VERIFICATION_FRAUD(cls):
                return cls("PENDING_VERIFICATION_FRAUD")
            
            @schemas.classproperty
            def PENDING_VERIFICATION_STATUS(cls):
                return cls("PENDING_VERIFICATION_STATUS")
            
            @schemas.classproperty
            def PENDING_VERIFY_REGISTRANT_DATA_QUALITY(cls):
                return cls("PENDING_VERIFY_REGISTRANT_DATA_QUALITY")
            
            @schemas.classproperty
            def RESERVED(cls):
                return cls("RESERVED")
            
            @schemas.classproperty
            def RESERVED_PREMIUM(cls):
                return cls("RESERVED_PREMIUM")
            
            @schemas.classproperty
            def REVERTED(cls):
                return cls("REVERTED")
            
            @schemas.classproperty
            def SUSPENDED_VERIFICATION_ICANN(cls):
                return cls("SUSPENDED_VERIFICATION_ICANN")
            
            @schemas.classproperty
            def TRANSFERRED_OUT(cls):
                return cls("TRANSFERRED_OUT")
            
            @schemas.classproperty
            def UNLOCKED_ABUSE(cls):
                return cls("UNLOCKED_ABUSE")
            
            @schemas.classproperty
            def UNLOCKED_SUPER(cls):
                return cls("UNLOCKED_SUPER")
            
            @schemas.classproperty
            def UNPARKED_AND_UNHELD(cls):
                return cls("UNPARKED_AND_UNHELD")
            
            @schemas.classproperty
            def UPDATED_OWNERSHIP(cls):
                return cls("UPDATED_OWNERSHIP")
            
            @schemas.classproperty
            def UPDATED_OWNERSHIP_HELD(cls):
                return cls("UPDATED_OWNERSHIP_HELD")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusesSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class StatusGroupsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def INACTIVE(cls):
                return cls("INACTIVE")
            
            @schemas.classproperty
            def PRE_REGISTRATION(cls):
                return cls("PRE_REGISTRATION")
            
            @schemas.classproperty
            def REDEMPTION(cls):
                return cls("REDEMPTION")
            
            @schemas.classproperty
            def RENEWABLE(cls):
                return cls("RENEWABLE")
            
            @schemas.classproperty
            def VERIFICATION_ICANN(cls):
                return cls("VERIFICATION_ICANN")
            
            @schemas.classproperty
            def VISIBLE(cls):
                return cls("VISIBLE")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusGroupsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class LimitSchema(
    schemas.IntSchema
):
    pass
MarkerSchema = schemas.StrSchema


class IncludesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def AUTH_CODE(cls):
                return cls("authCode")
            
            @schemas.classproperty
            def CONTACTS(cls):
                return cls("contacts")
            
            @schemas.classproperty
            def NAME_SERVERS(cls):
                return cls("nameServers")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IncludesSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
ModifiedDateSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'statuses': typing.Union[StatusesSchema, list, tuple, ],
        'statusGroups': typing.Union[StatusGroupsSchema, list, tuple, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'marker': typing.Union[MarkerSchema, str, ],
        'includes': typing.Union[IncludesSchema, list, tuple, ],
        'modifiedDate': typing.Union[ModifiedDateSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_statuses = api_client.QueryParameter(
    name="statuses",
    style=api_client.ParameterStyle.FORM,
    schema=StatusesSchema,
)
request_query_status_groups = api_client.QueryParameter(
    name="statusGroups",
    style=api_client.ParameterStyle.FORM,
    schema=StatusGroupsSchema,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_marker = api_client.QueryParameter(
    name="marker",
    style=api_client.ParameterStyle.FORM,
    schema=MarkerSchema,
    explode=True,
)
request_query_includes = api_client.QueryParameter(
    name="includes",
    style=api_client.ParameterStyle.FORM,
    schema=IncludesSchema,
)
request_query_modified_date = api_client.QueryParameter(
    name="modifiedDate",
    style=api_client.ParameterStyle.FORM,
    schema=ModifiedDateSchema,
    explode=True,
)
# Header params
XShopperIdSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'X-Shopper-Id': typing.Union[XShopperIdSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_shopper_id = api_client.HeaderParameter(
    name="X-Shopper-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XShopperIdSchema,
)
SchemaFor200ResponseBodyApplicationJson = V1GetDomainsList200ResponseSchema
SchemaFor200ResponseBodyApplicationJavascript = V1GetDomainsListResponseSchema
SchemaFor200ResponseBodyApplicationXml = V1GetDomainsList200Response1Schema
SchemaFor200ResponseBodyTextJavascript = V1GetDomainsList200Response2Schema
SchemaFor200ResponseBodyTextXml = V1GetDomainsList200Response3Schema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: V1GetDomainsList200Response


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: V1GetDomainsList200Response


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorSchema
SchemaFor400ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor400ResponseBodyApplicationXml = ErrorSchema
SchemaFor400ResponseBodyTextJavascript = ErrorSchema
SchemaFor400ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: Error


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextXml),
    },
)
SchemaFor401ResponseBodyApplicationJson = ErrorSchema
SchemaFor401ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor401ResponseBodyApplicationXml = ErrorSchema
SchemaFor401ResponseBodyTextJavascript = ErrorSchema
SchemaFor401ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: Error


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextXml),
    },
)
SchemaFor403ResponseBodyApplicationJson = ErrorSchema
SchemaFor403ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor403ResponseBodyApplicationXml = ErrorSchema
SchemaFor403ResponseBodyTextJavascript = ErrorSchema
SchemaFor403ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: Error


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextXml),
    },
)
SchemaFor422ResponseBodyApplicationJson = ErrorSchema
SchemaFor422ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor422ResponseBodyApplicationXml = ErrorSchema
SchemaFor422ResponseBodyTextJavascript = ErrorSchema
SchemaFor422ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: Error


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor422ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor422ResponseBodyTextXml),
    },
)
SchemaFor429ResponseBodyApplicationJson = ErrorLimitSchema
SchemaFor429ResponseBodyApplicationJavascript = ErrorLimitSchema
SchemaFor429ResponseBodyApplicationXml = ErrorLimitSchema
SchemaFor429ResponseBodyTextJavascript = ErrorLimitSchema
SchemaFor429ResponseBodyTextXml = ErrorLimitSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: ErrorLimit


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: ErrorLimit


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextXml),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorSchema
SchemaFor500ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor500ResponseBodyApplicationXml = ErrorSchema
SchemaFor500ResponseBodyTextJavascript = ErrorSchema
SchemaFor500ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: Error


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/javascript',
    'application/xml',
    'text/javascript',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _get_domains_list_mapped_args(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        if statuses is not None:
            _query_params["statuses"] = statuses
        if status_groups is not None:
            _query_params["statusGroups"] = status_groups
        if limit is not None:
            _query_params["limit"] = limit
        if marker is not None:
            _query_params["marker"] = marker
        if includes is not None:
            _query_params["includes"] = includes
        if modified_date is not None:
            _query_params["modifiedDate"] = modified_date
        if x_shopper_id is not None:
            _header_params["X-Shopper-Id"] = x_shopper_id
        args.query = _query_params
        args.header = _header_params
        return args

    async def _aget_domains_list_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Retrieve a list of Domains for the specified Shopper
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_statuses,
            request_query_status_groups,
            request_query_limit,
            request_query_marker,
            request_query_includes,
            request_query_modified_date,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_shopper_id,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/domains',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_domains_list_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Retrieve a list of Domains for the specified Shopper
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_statuses,
            request_query_status_groups,
            request_query_limit,
            request_query_marker,
            request_query_includes,
            request_query_modified_date,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_shopper_id,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/domains',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetDomainsListRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_domains_list(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_domains_list_mapped_args(
            x_shopper_id=x_shopper_id,
            statuses=statuses,
            status_groups=status_groups,
            limit=limit,
            marker=marker,
            includes=includes,
            modified_date=modified_date,
        )
        return await self._aget_domains_list_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def get_domains_list(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_domains_list_mapped_args(
            x_shopper_id=x_shopper_id,
            statuses=statuses,
            status_groups=status_groups,
            limit=limit,
            marker=marker,
            includes=includes,
            modified_date=modified_date,
        )
        return self._get_domains_list_oapg(
            query_params=args.query,
            header_params=args.header,
        )

class GetDomainsList(BaseApi):

    async def aget_domains_list(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> V1GetDomainsList200ResponsePydantic:
        raw_response = await self.raw.aget_domains_list(
            x_shopper_id=x_shopper_id,
            statuses=statuses,
            status_groups=status_groups,
            limit=limit,
            marker=marker,
            includes=includes,
            modified_date=modified_date,
            **kwargs,
        )
        if validate:
            return RootModel[V1GetDomainsList200ResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(V1GetDomainsList200ResponsePydantic, raw_response.body)
    
    
    def get_domains_list(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
        validate: bool = False,
    ) -> V1GetDomainsList200ResponsePydantic:
        raw_response = self.raw.get_domains_list(
            x_shopper_id=x_shopper_id,
            statuses=statuses,
            status_groups=status_groups,
            limit=limit,
            marker=marker,
            includes=includes,
            modified_date=modified_date,
        )
        if validate:
            return RootModel[V1GetDomainsList200ResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(V1GetDomainsList200ResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_domains_list_mapped_args(
            x_shopper_id=x_shopper_id,
            statuses=statuses,
            status_groups=status_groups,
            limit=limit,
            marker=marker,
            includes=includes,
            modified_date=modified_date,
        )
        return await self._aget_domains_list_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def get(
        self,
        x_shopper_id: typing.Optional[str] = None,
        statuses: typing.Optional[typing.List[str]] = None,
        status_groups: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        marker: typing.Optional[str] = None,
        includes: typing.Optional[typing.List[str]] = None,
        modified_date: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_domains_list_mapped_args(
            x_shopper_id=x_shopper_id,
            statuses=statuses,
            status_groups=status_groups,
            limit=limit,
            marker=marker,
            includes=includes,
            modified_date=modified_date,
        )
        return self._get_domains_list_oapg(
            query_params=args.query,
            header_params=args.header,
        )

