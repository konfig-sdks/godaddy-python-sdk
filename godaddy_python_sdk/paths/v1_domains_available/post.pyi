# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from godaddy_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from godaddy_python_sdk.api_response import AsyncGeneratorResponse
from godaddy_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401

from godaddy_python_sdk.model.v1_check_domain_availability_post_request import V1CheckDomainAvailabilityPostRequest as V1CheckDomainAvailabilityPostRequestSchema
from godaddy_python_sdk.model.domain_available_bulk import DomainAvailableBulk as DomainAvailableBulkSchema
from godaddy_python_sdk.model.error import Error as ErrorSchema
from godaddy_python_sdk.model.v1_check_domain_availability_post_request1 import V1CheckDomainAvailabilityPostRequest1 as V1CheckDomainAvailabilityPostRequest1Schema
from godaddy_python_sdk.model.domain_available_bulk_mixed import DomainAvailableBulkMixed as DomainAvailableBulkMixedSchema
from godaddy_python_sdk.model.v1_check_domain_availability_post_request2 import V1CheckDomainAvailabilityPostRequest2 as V1CheckDomainAvailabilityPostRequest2Schema
from godaddy_python_sdk.model.error_limit import ErrorLimit as ErrorLimitSchema

from godaddy_python_sdk.type.v1_check_domain_availability_post_request import V1CheckDomainAvailabilityPostRequest
from godaddy_python_sdk.type.v1_check_domain_availability_post_request2 import V1CheckDomainAvailabilityPostRequest2
from godaddy_python_sdk.type.domain_available_bulk import DomainAvailableBulk
from godaddy_python_sdk.type.error import Error
from godaddy_python_sdk.type.domain_available_bulk_mixed import DomainAvailableBulkMixed
from godaddy_python_sdk.type.error_limit import ErrorLimit
from godaddy_python_sdk.type.v1_check_domain_availability_post_request1 import V1CheckDomainAvailabilityPostRequest1

from ...api_client import Dictionary
from godaddy_python_sdk.pydantic.domain_available_bulk import DomainAvailableBulk as DomainAvailableBulkPydantic
from godaddy_python_sdk.pydantic.error_limit import ErrorLimit as ErrorLimitPydantic
from godaddy_python_sdk.pydantic.error import Error as ErrorPydantic
from godaddy_python_sdk.pydantic.v1_check_domain_availability_post_request import V1CheckDomainAvailabilityPostRequest as V1CheckDomainAvailabilityPostRequestPydantic
from godaddy_python_sdk.pydantic.v1_check_domain_availability_post_request1 import V1CheckDomainAvailabilityPostRequest1 as V1CheckDomainAvailabilityPostRequest1Pydantic
from godaddy_python_sdk.pydantic.domain_available_bulk_mixed import DomainAvailableBulkMixed as DomainAvailableBulkMixedPydantic
from godaddy_python_sdk.pydantic.v1_check_domain_availability_post_request2 import V1CheckDomainAvailabilityPostRequest2 as V1CheckDomainAvailabilityPostRequest2Pydantic

# Query params


class CheckTypeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def FAST(cls):
        return cls("FAST")
    
    @schemas.classproperty
    def FULL(cls):
        return cls("FULL")
    
    @schemas.classproperty
    def FAST(cls):
        return cls("fast")
    
    @schemas.classproperty
    def FULL(cls):
        return cls("full")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'checkType': typing.Union[CheckTypeSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_check_type = api_client.QueryParameter(
    name="checkType",
    style=api_client.ParameterStyle.FORM,
    schema=CheckTypeSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = V1CheckDomainAvailabilityPostRequestSchema
SchemaForRequestBodyApplicationXml = V1CheckDomainAvailabilityPostRequest1Schema
SchemaForRequestBodyTextXml = V1CheckDomainAvailabilityPostRequest2Schema


request_body_v1_check_domain_availability_post_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'application/xml': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaForRequestBodyTextXml),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = DomainAvailableBulkSchema
SchemaFor200ResponseBodyApplicationJavascript = DomainAvailableBulkSchema
SchemaFor200ResponseBodyApplicationXml = DomainAvailableBulkSchema
SchemaFor200ResponseBodyTextJavascript = DomainAvailableBulkSchema
SchemaFor200ResponseBodyTextXml = DomainAvailableBulkSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: DomainAvailableBulk


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: DomainAvailableBulk


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)
SchemaFor203ResponseBodyApplicationJson = DomainAvailableBulkMixedSchema
SchemaFor203ResponseBodyApplicationJavascript = DomainAvailableBulkMixedSchema
SchemaFor203ResponseBodyApplicationXml = DomainAvailableBulkMixedSchema
SchemaFor203ResponseBodyTextJavascript = DomainAvailableBulkMixedSchema
SchemaFor203ResponseBodyTextXml = DomainAvailableBulkMixedSchema


@dataclass
class ApiResponseFor203(api_client.ApiResponse):
    body: DomainAvailableBulkMixed


@dataclass
class ApiResponseFor203Async(api_client.AsyncApiResponse):
    body: DomainAvailableBulkMixed


_response_for_203 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor203,
    response_cls_async=ApiResponseFor203Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor203ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor203ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor203ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor203ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor203ResponseBodyTextXml),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorSchema
SchemaFor400ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor400ResponseBodyApplicationXml = ErrorSchema
SchemaFor400ResponseBodyTextJavascript = ErrorSchema
SchemaFor400ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: Error


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextXml),
    },
)
SchemaFor401ResponseBodyApplicationJson = ErrorSchema
SchemaFor401ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor401ResponseBodyApplicationXml = ErrorSchema
SchemaFor401ResponseBodyTextJavascript = ErrorSchema
SchemaFor401ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: Error


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextXml),
    },
)
SchemaFor403ResponseBodyApplicationJson = ErrorSchema
SchemaFor403ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor403ResponseBodyApplicationXml = ErrorSchema
SchemaFor403ResponseBodyTextJavascript = ErrorSchema
SchemaFor403ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: Error


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextXml),
    },
)
SchemaFor422ResponseBodyApplicationJson = ErrorSchema
SchemaFor422ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor422ResponseBodyApplicationXml = ErrorSchema
SchemaFor422ResponseBodyTextJavascript = ErrorSchema
SchemaFor422ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: Error


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor422ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor422ResponseBodyTextXml),
    },
)
SchemaFor429ResponseBodyApplicationJson = ErrorLimitSchema
SchemaFor429ResponseBodyApplicationJavascript = ErrorLimitSchema
SchemaFor429ResponseBodyApplicationXml = ErrorLimitSchema
SchemaFor429ResponseBodyTextJavascript = ErrorLimitSchema
SchemaFor429ResponseBodyTextXml = ErrorLimitSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: ErrorLimit


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: ErrorLimit


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextXml),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorSchema
SchemaFor500ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor500ResponseBodyApplicationXml = ErrorSchema
SchemaFor500ResponseBodyTextJavascript = ErrorSchema
SchemaFor500ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: Error


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/javascript',
    'application/xml',
    'text/javascript',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _check_domain_availability_post_mapped_args(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _body = {}
        args.body = body if body is not None else _body
        if check_type is not None:
            _query_params["checkType"] = check_type
        args.query = _query_params
        return args

    async def _acheck_domain_availability_post_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor203Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Determine whether or not the specified domains are available for purchase
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_check_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/domains/available',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_v1_check_domain_availability_post_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _check_domain_availability_post_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor203,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Determine whether or not the specified domains are available for purchase
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_check_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/domains/available',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_v1_check_domain_availability_post_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CheckDomainAvailabilityPostRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acheck_domain_availability_post(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor203Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._check_domain_availability_post_mapped_args(
            body=body,
            check_type=check_type,
        )
        return await self._acheck_domain_availability_post_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def check_domain_availability_post(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor203,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._check_domain_availability_post_mapped_args(
            body=body,
            check_type=check_type,
        )
        return self._check_domain_availability_post_oapg(
            body=args.body,
            query_params=args.query,
        )

class CheckDomainAvailabilityPost(BaseApi):

    async def acheck_domain_availability_post(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> DomainAvailableBulkPydantic:
        raw_response = await self.raw.acheck_domain_availability_post(
            body=body,
            check_type=check_type,
            **kwargs,
        )
        if validate:
            return DomainAvailableBulkPydantic(**raw_response.body)
        return api_client.construct_model_instance(DomainAvailableBulkPydantic, raw_response.body)
    
    
    def check_domain_availability_post(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
        validate: bool = False,
    ) -> DomainAvailableBulkPydantic:
        raw_response = self.raw.check_domain_availability_post(
            body=body,
            check_type=check_type,
        )
        if validate:
            return DomainAvailableBulkPydantic(**raw_response.body)
        return api_client.construct_model_instance(DomainAvailableBulkPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor203Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._check_domain_availability_post_mapped_args(
            body=body,
            check_type=check_type,
        )
        return await self._acheck_domain_availability_post_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        body: V1CheckDomainAvailabilityPostRequest,
        check_type: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor203,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._check_domain_availability_post_mapped_args(
            body=body,
            check_type=check_type,
        )
        return self._check_domain_availability_post_oapg(
            body=args.body,
            query_params=args.query,
        )

