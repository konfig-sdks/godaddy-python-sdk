# coding: utf-8

"""
    All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from godaddy_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from godaddy_python_sdk.api_response import AsyncGeneratorResponse
from godaddy_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from godaddy_python_sdk import schemas  # noqa: F401

from godaddy_python_sdk.model.v1_suggest_alternate_domains200_response3 import V1SuggestAlternateDomains200Response3 as V1SuggestAlternateDomains200Response3Schema
from godaddy_python_sdk.model.v1_suggest_alternate_domains200_response import V1SuggestAlternateDomains200Response as V1SuggestAlternateDomains200ResponseSchema
from godaddy_python_sdk.model.error import Error as ErrorSchema
from godaddy_python_sdk.model.v1_suggest_alternate_domains200_response1 import V1SuggestAlternateDomains200Response1 as V1SuggestAlternateDomains200Response1Schema
from godaddy_python_sdk.model.v1_suggest_alternate_domains_response import V1SuggestAlternateDomainsResponse as V1SuggestAlternateDomainsResponseSchema
from godaddy_python_sdk.model.error_limit import ErrorLimit as ErrorLimitSchema
from godaddy_python_sdk.model.v1_suggest_alternate_domains200_response2 import V1SuggestAlternateDomains200Response2 as V1SuggestAlternateDomains200Response2Schema

from godaddy_python_sdk.type.v1_suggest_alternate_domains200_response3 import V1SuggestAlternateDomains200Response3
from godaddy_python_sdk.type.v1_suggest_alternate_domains200_response import V1SuggestAlternateDomains200Response
from godaddy_python_sdk.type.v1_suggest_alternate_domains_response import V1SuggestAlternateDomainsResponse
from godaddy_python_sdk.type.v1_suggest_alternate_domains200_response2 import V1SuggestAlternateDomains200Response2
from godaddy_python_sdk.type.error import Error
from godaddy_python_sdk.type.error_limit import ErrorLimit
from godaddy_python_sdk.type.v1_suggest_alternate_domains200_response1 import V1SuggestAlternateDomains200Response1

from ...api_client import Dictionary
from godaddy_python_sdk.pydantic.v1_suggest_alternate_domains200_response1 import V1SuggestAlternateDomains200Response1 as V1SuggestAlternateDomains200Response1Pydantic
from godaddy_python_sdk.pydantic.error_limit import ErrorLimit as ErrorLimitPydantic
from godaddy_python_sdk.pydantic.v1_suggest_alternate_domains200_response2 import V1SuggestAlternateDomains200Response2 as V1SuggestAlternateDomains200Response2Pydantic
from godaddy_python_sdk.pydantic.error import Error as ErrorPydantic
from godaddy_python_sdk.pydantic.v1_suggest_alternate_domains_response import V1SuggestAlternateDomainsResponse as V1SuggestAlternateDomainsResponsePydantic
from godaddy_python_sdk.pydantic.v1_suggest_alternate_domains200_response3 import V1SuggestAlternateDomains200Response3 as V1SuggestAlternateDomains200Response3Pydantic
from godaddy_python_sdk.pydantic.v1_suggest_alternate_domains200_response import V1SuggestAlternateDomains200Response as V1SuggestAlternateDomains200ResponsePydantic

# Query params
QuerySchema = schemas.StrSchema


class CountrySchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def AC(cls):
        return cls("AC")
    
    @schemas.classproperty
    def AD(cls):
        return cls("AD")
    
    @schemas.classproperty
    def AE(cls):
        return cls("AE")
    
    @schemas.classproperty
    def AF(cls):
        return cls("AF")
    
    @schemas.classproperty
    def AG(cls):
        return cls("AG")
    
    @schemas.classproperty
    def AI(cls):
        return cls("AI")
    
    @schemas.classproperty
    def AL(cls):
        return cls("AL")
    
    @schemas.classproperty
    def AM(cls):
        return cls("AM")
    
    @schemas.classproperty
    def AO(cls):
        return cls("AO")
    
    @schemas.classproperty
    def AQ(cls):
        return cls("AQ")
    
    @schemas.classproperty
    def AR(cls):
        return cls("AR")
    
    @schemas.classproperty
    def AS(cls):
        return cls("AS")
    
    @schemas.classproperty
    def AT(cls):
        return cls("AT")
    
    @schemas.classproperty
    def AU(cls):
        return cls("AU")
    
    @schemas.classproperty
    def AW(cls):
        return cls("AW")
    
    @schemas.classproperty
    def AX(cls):
        return cls("AX")
    
    @schemas.classproperty
    def AZ(cls):
        return cls("AZ")
    
    @schemas.classproperty
    def BA(cls):
        return cls("BA")
    
    @schemas.classproperty
    def BB(cls):
        return cls("BB")
    
    @schemas.classproperty
    def BD(cls):
        return cls("BD")
    
    @schemas.classproperty
    def BE(cls):
        return cls("BE")
    
    @schemas.classproperty
    def BF(cls):
        return cls("BF")
    
    @schemas.classproperty
    def BG(cls):
        return cls("BG")
    
    @schemas.classproperty
    def BH(cls):
        return cls("BH")
    
    @schemas.classproperty
    def BI(cls):
        return cls("BI")
    
    @schemas.classproperty
    def BJ(cls):
        return cls("BJ")
    
    @schemas.classproperty
    def BM(cls):
        return cls("BM")
    
    @schemas.classproperty
    def BN(cls):
        return cls("BN")
    
    @schemas.classproperty
    def BO(cls):
        return cls("BO")
    
    @schemas.classproperty
    def BQ(cls):
        return cls("BQ")
    
    @schemas.classproperty
    def BR(cls):
        return cls("BR")
    
    @schemas.classproperty
    def BS(cls):
        return cls("BS")
    
    @schemas.classproperty
    def BT(cls):
        return cls("BT")
    
    @schemas.classproperty
    def BV(cls):
        return cls("BV")
    
    @schemas.classproperty
    def BW(cls):
        return cls("BW")
    
    @schemas.classproperty
    def BY(cls):
        return cls("BY")
    
    @schemas.classproperty
    def BZ(cls):
        return cls("BZ")
    
    @schemas.classproperty
    def CA(cls):
        return cls("CA")
    
    @schemas.classproperty
    def CC(cls):
        return cls("CC")
    
    @schemas.classproperty
    def CD(cls):
        return cls("CD")
    
    @schemas.classproperty
    def CF(cls):
        return cls("CF")
    
    @schemas.classproperty
    def CG(cls):
        return cls("CG")
    
    @schemas.classproperty
    def CH(cls):
        return cls("CH")
    
    @schemas.classproperty
    def CI(cls):
        return cls("CI")
    
    @schemas.classproperty
    def CK(cls):
        return cls("CK")
    
    @schemas.classproperty
    def CL(cls):
        return cls("CL")
    
    @schemas.classproperty
    def CM(cls):
        return cls("CM")
    
    @schemas.classproperty
    def CN(cls):
        return cls("CN")
    
    @schemas.classproperty
    def CO(cls):
        return cls("CO")
    
    @schemas.classproperty
    def CR(cls):
        return cls("CR")
    
    @schemas.classproperty
    def CV(cls):
        return cls("CV")
    
    @schemas.classproperty
    def CW(cls):
        return cls("CW")
    
    @schemas.classproperty
    def CX(cls):
        return cls("CX")
    
    @schemas.classproperty
    def CY(cls):
        return cls("CY")
    
    @schemas.classproperty
    def CZ(cls):
        return cls("CZ")
    
    @schemas.classproperty
    def DE(cls):
        return cls("DE")
    
    @schemas.classproperty
    def DJ(cls):
        return cls("DJ")
    
    @schemas.classproperty
    def DK(cls):
        return cls("DK")
    
    @schemas.classproperty
    def DM(cls):
        return cls("DM")
    
    @schemas.classproperty
    def DO(cls):
        return cls("DO")
    
    @schemas.classproperty
    def DZ(cls):
        return cls("DZ")
    
    @schemas.classproperty
    def EC(cls):
        return cls("EC")
    
    @schemas.classproperty
    def EE(cls):
        return cls("EE")
    
    @schemas.classproperty
    def EG(cls):
        return cls("EG")
    
    @schemas.classproperty
    def EH(cls):
        return cls("EH")
    
    @schemas.classproperty
    def ER(cls):
        return cls("ER")
    
    @schemas.classproperty
    def ES(cls):
        return cls("ES")
    
    @schemas.classproperty
    def ET(cls):
        return cls("ET")
    
    @schemas.classproperty
    def FI(cls):
        return cls("FI")
    
    @schemas.classproperty
    def FJ(cls):
        return cls("FJ")
    
    @schemas.classproperty
    def FK(cls):
        return cls("FK")
    
    @schemas.classproperty
    def FM(cls):
        return cls("FM")
    
    @schemas.classproperty
    def FO(cls):
        return cls("FO")
    
    @schemas.classproperty
    def FR(cls):
        return cls("FR")
    
    @schemas.classproperty
    def GA(cls):
        return cls("GA")
    
    @schemas.classproperty
    def GB(cls):
        return cls("GB")
    
    @schemas.classproperty
    def GD(cls):
        return cls("GD")
    
    @schemas.classproperty
    def GE(cls):
        return cls("GE")
    
    @schemas.classproperty
    def GF(cls):
        return cls("GF")
    
    @schemas.classproperty
    def GG(cls):
        return cls("GG")
    
    @schemas.classproperty
    def GH(cls):
        return cls("GH")
    
    @schemas.classproperty
    def GI(cls):
        return cls("GI")
    
    @schemas.classproperty
    def GL(cls):
        return cls("GL")
    
    @schemas.classproperty
    def GM(cls):
        return cls("GM")
    
    @schemas.classproperty
    def GN(cls):
        return cls("GN")
    
    @schemas.classproperty
    def GP(cls):
        return cls("GP")
    
    @schemas.classproperty
    def GQ(cls):
        return cls("GQ")
    
    @schemas.classproperty
    def GR(cls):
        return cls("GR")
    
    @schemas.classproperty
    def GS(cls):
        return cls("GS")
    
    @schemas.classproperty
    def GT(cls):
        return cls("GT")
    
    @schemas.classproperty
    def GU(cls):
        return cls("GU")
    
    @schemas.classproperty
    def GW(cls):
        return cls("GW")
    
    @schemas.classproperty
    def GY(cls):
        return cls("GY")
    
    @schemas.classproperty
    def HK(cls):
        return cls("HK")
    
    @schemas.classproperty
    def HM(cls):
        return cls("HM")
    
    @schemas.classproperty
    def HN(cls):
        return cls("HN")
    
    @schemas.classproperty
    def HR(cls):
        return cls("HR")
    
    @schemas.classproperty
    def HT(cls):
        return cls("HT")
    
    @schemas.classproperty
    def HU(cls):
        return cls("HU")
    
    @schemas.classproperty
    def ID(cls):
        return cls("ID")
    
    @schemas.classproperty
    def IE(cls):
        return cls("IE")
    
    @schemas.classproperty
    def IL(cls):
        return cls("IL")
    
    @schemas.classproperty
    def IM(cls):
        return cls("IM")
    
    @schemas.classproperty
    def IN(cls):
        return cls("IN")
    
    @schemas.classproperty
    def IO(cls):
        return cls("IO")
    
    @schemas.classproperty
    def IQ(cls):
        return cls("IQ")
    
    @schemas.classproperty
    def IS(cls):
        return cls("IS")
    
    @schemas.classproperty
    def IT(cls):
        return cls("IT")
    
    @schemas.classproperty
    def JE(cls):
        return cls("JE")
    
    @schemas.classproperty
    def JM(cls):
        return cls("JM")
    
    @schemas.classproperty
    def JO(cls):
        return cls("JO")
    
    @schemas.classproperty
    def JP(cls):
        return cls("JP")
    
    @schemas.classproperty
    def KE(cls):
        return cls("KE")
    
    @schemas.classproperty
    def KG(cls):
        return cls("KG")
    
    @schemas.classproperty
    def KH(cls):
        return cls("KH")
    
    @schemas.classproperty
    def KI(cls):
        return cls("KI")
    
    @schemas.classproperty
    def KM(cls):
        return cls("KM")
    
    @schemas.classproperty
    def KN(cls):
        return cls("KN")
    
    @schemas.classproperty
    def KR(cls):
        return cls("KR")
    
    @schemas.classproperty
    def KV(cls):
        return cls("KV")
    
    @schemas.classproperty
    def KW(cls):
        return cls("KW")
    
    @schemas.classproperty
    def KY(cls):
        return cls("KY")
    
    @schemas.classproperty
    def KZ(cls):
        return cls("KZ")
    
    @schemas.classproperty
    def LA(cls):
        return cls("LA")
    
    @schemas.classproperty
    def LB(cls):
        return cls("LB")
    
    @schemas.classproperty
    def LC(cls):
        return cls("LC")
    
    @schemas.classproperty
    def LI(cls):
        return cls("LI")
    
    @schemas.classproperty
    def LK(cls):
        return cls("LK")
    
    @schemas.classproperty
    def LR(cls):
        return cls("LR")
    
    @schemas.classproperty
    def LS(cls):
        return cls("LS")
    
    @schemas.classproperty
    def LT(cls):
        return cls("LT")
    
    @schemas.classproperty
    def LU(cls):
        return cls("LU")
    
    @schemas.classproperty
    def LV(cls):
        return cls("LV")
    
    @schemas.classproperty
    def LY(cls):
        return cls("LY")
    
    @schemas.classproperty
    def MA(cls):
        return cls("MA")
    
    @schemas.classproperty
    def MC(cls):
        return cls("MC")
    
    @schemas.classproperty
    def MD(cls):
        return cls("MD")
    
    @schemas.classproperty
    def ME(cls):
        return cls("ME")
    
    @schemas.classproperty
    def MG(cls):
        return cls("MG")
    
    @schemas.classproperty
    def MH(cls):
        return cls("MH")
    
    @schemas.classproperty
    def MK(cls):
        return cls("MK")
    
    @schemas.classproperty
    def ML(cls):
        return cls("ML")
    
    @schemas.classproperty
    def MM(cls):
        return cls("MM")
    
    @schemas.classproperty
    def MN(cls):
        return cls("MN")
    
    @schemas.classproperty
    def MO(cls):
        return cls("MO")
    
    @schemas.classproperty
    def MP(cls):
        return cls("MP")
    
    @schemas.classproperty
    def MQ(cls):
        return cls("MQ")
    
    @schemas.classproperty
    def MR(cls):
        return cls("MR")
    
    @schemas.classproperty
    def MS(cls):
        return cls("MS")
    
    @schemas.classproperty
    def MT(cls):
        return cls("MT")
    
    @schemas.classproperty
    def MU(cls):
        return cls("MU")
    
    @schemas.classproperty
    def MV(cls):
        return cls("MV")
    
    @schemas.classproperty
    def MW(cls):
        return cls("MW")
    
    @schemas.classproperty
    def MX(cls):
        return cls("MX")
    
    @schemas.classproperty
    def MY(cls):
        return cls("MY")
    
    @schemas.classproperty
    def MZ(cls):
        return cls("MZ")
    
    @schemas.classproperty
    def NA(cls):
        return cls("NA")
    
    @schemas.classproperty
    def NC(cls):
        return cls("NC")
    
    @schemas.classproperty
    def NE(cls):
        return cls("NE")
    
    @schemas.classproperty
    def NF(cls):
        return cls("NF")
    
    @schemas.classproperty
    def NG(cls):
        return cls("NG")
    
    @schemas.classproperty
    def NI(cls):
        return cls("NI")
    
    @schemas.classproperty
    def NL(cls):
        return cls("NL")
    
    @schemas.classproperty
    def FALSE(cls):
        return cls("false")
    
    @schemas.classproperty
    def NP(cls):
        return cls("NP")
    
    @schemas.classproperty
    def NR(cls):
        return cls("NR")
    
    @schemas.classproperty
    def NU(cls):
        return cls("NU")
    
    @schemas.classproperty
    def NZ(cls):
        return cls("NZ")
    
    @schemas.classproperty
    def OM(cls):
        return cls("OM")
    
    @schemas.classproperty
    def PA(cls):
        return cls("PA")
    
    @schemas.classproperty
    def PE(cls):
        return cls("PE")
    
    @schemas.classproperty
    def PF(cls):
        return cls("PF")
    
    @schemas.classproperty
    def PG(cls):
        return cls("PG")
    
    @schemas.classproperty
    def PH(cls):
        return cls("PH")
    
    @schemas.classproperty
    def PK(cls):
        return cls("PK")
    
    @schemas.classproperty
    def PL(cls):
        return cls("PL")
    
    @schemas.classproperty
    def PM(cls):
        return cls("PM")
    
    @schemas.classproperty
    def PN(cls):
        return cls("PN")
    
    @schemas.classproperty
    def PR(cls):
        return cls("PR")
    
    @schemas.classproperty
    def PS(cls):
        return cls("PS")
    
    @schemas.classproperty
    def PT(cls):
        return cls("PT")
    
    @schemas.classproperty
    def PW(cls):
        return cls("PW")
    
    @schemas.classproperty
    def PY(cls):
        return cls("PY")
    
    @schemas.classproperty
    def QA(cls):
        return cls("QA")
    
    @schemas.classproperty
    def RE(cls):
        return cls("RE")
    
    @schemas.classproperty
    def RO(cls):
        return cls("RO")
    
    @schemas.classproperty
    def RS(cls):
        return cls("RS")
    
    @schemas.classproperty
    def RU(cls):
        return cls("RU")
    
    @schemas.classproperty
    def RW(cls):
        return cls("RW")
    
    @schemas.classproperty
    def SA(cls):
        return cls("SA")
    
    @schemas.classproperty
    def SB(cls):
        return cls("SB")
    
    @schemas.classproperty
    def SC(cls):
        return cls("SC")
    
    @schemas.classproperty
    def SE(cls):
        return cls("SE")
    
    @schemas.classproperty
    def SG(cls):
        return cls("SG")
    
    @schemas.classproperty
    def SH(cls):
        return cls("SH")
    
    @schemas.classproperty
    def SI(cls):
        return cls("SI")
    
    @schemas.classproperty
    def SJ(cls):
        return cls("SJ")
    
    @schemas.classproperty
    def SK(cls):
        return cls("SK")
    
    @schemas.classproperty
    def SL(cls):
        return cls("SL")
    
    @schemas.classproperty
    def SM(cls):
        return cls("SM")
    
    @schemas.classproperty
    def SN(cls):
        return cls("SN")
    
    @schemas.classproperty
    def SO(cls):
        return cls("SO")
    
    @schemas.classproperty
    def SR(cls):
        return cls("SR")
    
    @schemas.classproperty
    def ST(cls):
        return cls("ST")
    
    @schemas.classproperty
    def SV(cls):
        return cls("SV")
    
    @schemas.classproperty
    def SX(cls):
        return cls("SX")
    
    @schemas.classproperty
    def SZ(cls):
        return cls("SZ")
    
    @schemas.classproperty
    def TC(cls):
        return cls("TC")
    
    @schemas.classproperty
    def TD(cls):
        return cls("TD")
    
    @schemas.classproperty
    def TF(cls):
        return cls("TF")
    
    @schemas.classproperty
    def TG(cls):
        return cls("TG")
    
    @schemas.classproperty
    def TH(cls):
        return cls("TH")
    
    @schemas.classproperty
    def TJ(cls):
        return cls("TJ")
    
    @schemas.classproperty
    def TK(cls):
        return cls("TK")
    
    @schemas.classproperty
    def TL(cls):
        return cls("TL")
    
    @schemas.classproperty
    def TM(cls):
        return cls("TM")
    
    @schemas.classproperty
    def TN(cls):
        return cls("TN")
    
    @schemas.classproperty
    def TO(cls):
        return cls("TO")
    
    @schemas.classproperty
    def TP(cls):
        return cls("TP")
    
    @schemas.classproperty
    def TR(cls):
        return cls("TR")
    
    @schemas.classproperty
    def TT(cls):
        return cls("TT")
    
    @schemas.classproperty
    def TV(cls):
        return cls("TV")
    
    @schemas.classproperty
    def TW(cls):
        return cls("TW")
    
    @schemas.classproperty
    def TZ(cls):
        return cls("TZ")
    
    @schemas.classproperty
    def UA(cls):
        return cls("UA")
    
    @schemas.classproperty
    def UG(cls):
        return cls("UG")
    
    @schemas.classproperty
    def UM(cls):
        return cls("UM")
    
    @schemas.classproperty
    def US(cls):
        return cls("US")
    
    @schemas.classproperty
    def UY(cls):
        return cls("UY")
    
    @schemas.classproperty
    def UZ(cls):
        return cls("UZ")
    
    @schemas.classproperty
    def VA(cls):
        return cls("VA")
    
    @schemas.classproperty
    def VC(cls):
        return cls("VC")
    
    @schemas.classproperty
    def VE(cls):
        return cls("VE")
    
    @schemas.classproperty
    def VG(cls):
        return cls("VG")
    
    @schemas.classproperty
    def VI(cls):
        return cls("VI")
    
    @schemas.classproperty
    def VN(cls):
        return cls("VN")
    
    @schemas.classproperty
    def VU(cls):
        return cls("VU")
    
    @schemas.classproperty
    def WF(cls):
        return cls("WF")
    
    @schemas.classproperty
    def WS(cls):
        return cls("WS")
    
    @schemas.classproperty
    def YE(cls):
        return cls("YE")
    
    @schemas.classproperty
    def YT(cls):
        return cls("YT")
    
    @schemas.classproperty
    def ZA(cls):
        return cls("ZA")
    
    @schemas.classproperty
    def ZM(cls):
        return cls("ZM")
    
    @schemas.classproperty
    def ZW(cls):
        return cls("ZW")
CitySchema = schemas.StrSchema


class SourcesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def CC_TLD(cls):
                return cls("CC_TLD")
            
            @schemas.classproperty
            def EXTENSION(cls):
                return cls("EXTENSION")
            
            @schemas.classproperty
            def KEYWORD_SPIN(cls):
                return cls("KEYWORD_SPIN")
            
            @schemas.classproperty
            def PREMIUM(cls):
                return cls("PREMIUM")
            
            @schemas.classproperty
            def CCTLD(cls):
                return cls("cctld")
            
            @schemas.classproperty
            def EXTENSION(cls):
                return cls("extension")
            
            @schemas.classproperty
            def KEYWORDSPIN(cls):
                return cls("keywordspin")
            
            @schemas.classproperty
            def PREMIUM(cls):
                return cls("premium")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SourcesSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class TldsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TldsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
LengthMaxSchema = schemas.IntSchema
LengthMinSchema = schemas.IntSchema
LimitSchema = schemas.IntSchema
WaitMsSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'query': typing.Union[QuerySchema, str, ],
        'country': typing.Union[CountrySchema, str, ],
        'city': typing.Union[CitySchema, str, ],
        'sources': typing.Union[SourcesSchema, list, tuple, ],
        'tlds': typing.Union[TldsSchema, list, tuple, ],
        'lengthMax': typing.Union[LengthMaxSchema, decimal.Decimal, int, ],
        'lengthMin': typing.Union[LengthMinSchema, decimal.Decimal, int, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'waitMs': typing.Union[WaitMsSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_query = api_client.QueryParameter(
    name="query",
    style=api_client.ParameterStyle.FORM,
    schema=QuerySchema,
    explode=True,
)
request_query_country = api_client.QueryParameter(
    name="country",
    style=api_client.ParameterStyle.FORM,
    schema=CountrySchema,
    explode=True,
)
request_query_city = api_client.QueryParameter(
    name="city",
    style=api_client.ParameterStyle.FORM,
    schema=CitySchema,
    explode=True,
)
request_query_sources = api_client.QueryParameter(
    name="sources",
    style=api_client.ParameterStyle.FORM,
    schema=SourcesSchema,
)
request_query_tlds = api_client.QueryParameter(
    name="tlds",
    style=api_client.ParameterStyle.FORM,
    schema=TldsSchema,
)
request_query_length_max = api_client.QueryParameter(
    name="lengthMax",
    style=api_client.ParameterStyle.FORM,
    schema=LengthMaxSchema,
    explode=True,
)
request_query_length_min = api_client.QueryParameter(
    name="lengthMin",
    style=api_client.ParameterStyle.FORM,
    schema=LengthMinSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_wait_ms = api_client.QueryParameter(
    name="waitMs",
    style=api_client.ParameterStyle.FORM,
    schema=WaitMsSchema,
    explode=True,
)
# Header params
XShopperIdSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'X-Shopper-Id': typing.Union[XShopperIdSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_shopper_id = api_client.HeaderParameter(
    name="X-Shopper-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XShopperIdSchema,
)
SchemaFor200ResponseBodyApplicationJson = V1SuggestAlternateDomains200ResponseSchema
SchemaFor200ResponseBodyApplicationJavascript = V1SuggestAlternateDomainsResponseSchema
SchemaFor200ResponseBodyApplicationXml = V1SuggestAlternateDomains200Response1Schema
SchemaFor200ResponseBodyTextJavascript = V1SuggestAlternateDomains200Response2Schema
SchemaFor200ResponseBodyTextXml = V1SuggestAlternateDomains200Response3Schema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: V1SuggestAlternateDomains200Response


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: V1SuggestAlternateDomains200Response


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorSchema
SchemaFor400ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor400ResponseBodyApplicationXml = ErrorSchema
SchemaFor400ResponseBodyTextJavascript = ErrorSchema
SchemaFor400ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: Error


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextXml),
    },
)
SchemaFor401ResponseBodyApplicationJson = ErrorSchema
SchemaFor401ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor401ResponseBodyApplicationXml = ErrorSchema
SchemaFor401ResponseBodyTextJavascript = ErrorSchema
SchemaFor401ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: Error


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextXml),
    },
)
SchemaFor403ResponseBodyApplicationJson = ErrorSchema
SchemaFor403ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor403ResponseBodyApplicationXml = ErrorSchema
SchemaFor403ResponseBodyTextJavascript = ErrorSchema
SchemaFor403ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: Error


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextXml),
    },
)
SchemaFor404ResponseBodyApplicationJson = ErrorSchema
SchemaFor404ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor404ResponseBodyApplicationXml = ErrorSchema
SchemaFor404ResponseBodyTextJavascript = ErrorSchema
SchemaFor404ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: Error


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextXml),
    },
)
SchemaFor422ResponseBodyApplicationJson = ErrorSchema
SchemaFor422ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor422ResponseBodyApplicationXml = ErrorSchema
SchemaFor422ResponseBodyTextJavascript = ErrorSchema
SchemaFor422ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: Error


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor422ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor422ResponseBodyTextXml),
    },
)
SchemaFor429ResponseBodyApplicationJson = ErrorLimitSchema
SchemaFor429ResponseBodyApplicationJavascript = ErrorLimitSchema
SchemaFor429ResponseBodyApplicationXml = ErrorLimitSchema
SchemaFor429ResponseBodyTextJavascript = ErrorLimitSchema
SchemaFor429ResponseBodyTextXml = ErrorLimitSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: ErrorLimit


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: ErrorLimit


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextXml),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorSchema
SchemaFor500ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor500ResponseBodyApplicationXml = ErrorSchema
SchemaFor500ResponseBodyTextJavascript = ErrorSchema
SchemaFor500ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: Error


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
SchemaFor504ResponseBodyApplicationJson = ErrorSchema
SchemaFor504ResponseBodyApplicationJavascript = ErrorSchema
SchemaFor504ResponseBodyApplicationXml = ErrorSchema
SchemaFor504ResponseBodyTextJavascript = ErrorSchema
SchemaFor504ResponseBodyTextXml = ErrorSchema


@dataclass
class ApiResponseFor504(api_client.ApiResponse):
    body: Error


@dataclass
class ApiResponseFor504Async(api_client.AsyncApiResponse):
    body: Error


_response_for_504 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor504,
    response_cls_async=ApiResponseFor504Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor504ResponseBodyApplicationJson),
        'application/javascript': api_client.MediaType(
            schema=SchemaFor504ResponseBodyApplicationJavascript),
        'application/xml': api_client.MediaType(
            schema=SchemaFor504ResponseBodyApplicationXml),
        'text/javascript': api_client.MediaType(
            schema=SchemaFor504ResponseBodyTextJavascript),
        'text/xml': api_client.MediaType(
            schema=SchemaFor504ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/javascript',
    'application/xml',
    'text/javascript',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _suggest_alternate_domains_mapped_args(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        if query is not None:
            _query_params["query"] = query
        if country is not None:
            _query_params["country"] = country
        if city is not None:
            _query_params["city"] = city
        if sources is not None:
            _query_params["sources"] = sources
        if tlds is not None:
            _query_params["tlds"] = tlds
        if length_max is not None:
            _query_params["lengthMax"] = length_max
        if length_min is not None:
            _query_params["lengthMin"] = length_min
        if limit is not None:
            _query_params["limit"] = limit
        if wait_ms is not None:
            _query_params["waitMs"] = wait_ms
        if x_shopper_id is not None:
            _header_params["X-Shopper-Id"] = x_shopper_id
        args.query = _query_params
        args.header = _header_params
        return args

    async def _asuggest_alternate_domains_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper&#x27;s purchase history
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_query,
            request_query_country,
            request_query_city,
            request_query_sources,
            request_query_tlds,
            request_query_length_max,
            request_query_length_min,
            request_query_limit,
            request_query_wait_ms,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_shopper_id,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/domains/suggest',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _suggest_alternate_domains_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper&#x27;s purchase history
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_query,
            request_query_country,
            request_query_city,
            request_query_sources,
            request_query_tlds,
            request_query_length_max,
            request_query_length_min,
            request_query_limit,
            request_query_wait_ms,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_shopper_id,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/domains/suggest',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class SuggestAlternateDomainsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def asuggest_alternate_domains(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._suggest_alternate_domains_mapped_args(
            x_shopper_id=x_shopper_id,
            query=query,
            country=country,
            city=city,
            sources=sources,
            tlds=tlds,
            length_max=length_max,
            length_min=length_min,
            limit=limit,
            wait_ms=wait_ms,
        )
        return await self._asuggest_alternate_domains_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def suggest_alternate_domains(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._suggest_alternate_domains_mapped_args(
            x_shopper_id=x_shopper_id,
            query=query,
            country=country,
            city=city,
            sources=sources,
            tlds=tlds,
            length_max=length_max,
            length_min=length_min,
            limit=limit,
            wait_ms=wait_ms,
        )
        return self._suggest_alternate_domains_oapg(
            query_params=args.query,
            header_params=args.header,
        )

class SuggestAlternateDomains(BaseApi):

    async def asuggest_alternate_domains(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> V1SuggestAlternateDomains200ResponsePydantic:
        raw_response = await self.raw.asuggest_alternate_domains(
            x_shopper_id=x_shopper_id,
            query=query,
            country=country,
            city=city,
            sources=sources,
            tlds=tlds,
            length_max=length_max,
            length_min=length_min,
            limit=limit,
            wait_ms=wait_ms,
            **kwargs,
        )
        if validate:
            return RootModel[V1SuggestAlternateDomains200ResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(V1SuggestAlternateDomains200ResponsePydantic, raw_response.body)
    
    
    def suggest_alternate_domains(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
        validate: bool = False,
    ) -> V1SuggestAlternateDomains200ResponsePydantic:
        raw_response = self.raw.suggest_alternate_domains(
            x_shopper_id=x_shopper_id,
            query=query,
            country=country,
            city=city,
            sources=sources,
            tlds=tlds,
            length_max=length_max,
            length_min=length_min,
            limit=limit,
            wait_ms=wait_ms,
        )
        if validate:
            return RootModel[V1SuggestAlternateDomains200ResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(V1SuggestAlternateDomains200ResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._suggest_alternate_domains_mapped_args(
            x_shopper_id=x_shopper_id,
            query=query,
            country=country,
            city=city,
            sources=sources,
            tlds=tlds,
            length_max=length_max,
            length_min=length_min,
            limit=limit,
            wait_ms=wait_ms,
        )
        return await self._asuggest_alternate_domains_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def get(
        self,
        x_shopper_id: typing.Optional[str] = None,
        query: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        sources: typing.Optional[typing.List[str]] = None,
        tlds: typing.Optional[typing.List[str]] = None,
        length_max: typing.Optional[int] = None,
        length_min: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        wait_ms: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._suggest_alternate_domains_mapped_args(
            x_shopper_id=x_shopper_id,
            query=query,
            country=country,
            city=city,
            sources=sources,
            tlds=tlds,
            length_max=length_max,
            length_min=length_min,
            limit=limit,
            wait_ms=wait_ms,
        )
        return self._suggest_alternate_domains_oapg(
            query_params=args.query,
            header_params=args.header,
        )

